"use strict";!function(){function e(){function e(e,s){function t(t){var o=$.makeArray(e.classList),r=t[0].oldValue,a=n||(r?r.split(" "):[]),l=o.filter(i,a),c=a.filter(i,o);s(l,c,o,a),n=o}function i(e){return this.indexOf(e)<0}var n,o=new MutationObserver(t);return o.observe(e,{attributes:!0,attributeOldValue:!0}),o.old=n,o}function s(s,t,i,n){function o(e,s){return s.every(function(s){return e.indexOf(s)>=0})}var r=t.split(" ");return i="function"==typeof i?i:function(){},n="function"==typeof n?n:function(){},new e(s,function(e,s,t,a){r.length>1?!o(a,r)&&o(t,r)?i():o(a,r)&&!o(t,r)&&n():o(e,r)?i():o(s,r)&&n()})}function t(e,s){var t,i,n=!1;return function(){return n?(t=arguments,void(i=this)):(n=!0,void setTimeout(function(){n=!1,e.apply(i,t),t=i=null},s))}}function i(e){var s=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;if(e.length){var i=$(e),n=i.offset();e=i[0];var o=b.scrollTop()+t,r=o+b.height(),a=b.scrollLeft(),l=a+b.width(),c=n.top,d=i.outerHeight()?c+i.outerHeight():c+e.getBoundingClientRect().height,p=n.left,u=i.outerWidth()?p+i.outerWidth():c+e.getBoundingClientRect().width;return s?o<d&&r>c&&a<u&&l>p:o<c&&r>d&&a<p&&l>u}}function n(){var e=window.navigator.userAgent,s=e.indexOf("MSIE "),t=e.indexOf("Trident/");return s>0||t>0}function o(){n()?$("html").addClass("no-object-fit"):$("html").addClass("object-fit")}function r(e){L?L.options("overflowBehavior.y",e):z.overflowBehavior.y=e}function a(){if($("#map").length){var e=$("#map"),s=+e.data("ln"),t=+e.data("lg"),i=e.data("img");ymaps.ready(function(){var e=new ymaps.Map("map",{center:[s,t],zoom:13}),n=new ymaps.Placemark(e.getCenter(),{hintContent:""},{iconLayout:"default#image",iconImageHref:i,iconImageSize:[196,105],iconImageOffset:[-102,-50]});e.geoObjects.add(n)})}}function l(){var e=$(".js-form-search");e.on("submit",function(e){e.preventDefault()});var s="/json/autocomplete.json";$.ajax({url:s,success:function(e){if(e.success){var s=function(e,s){return'\n                                <div class="b-menu-map__item js-map-item">\n                                    <a class="b-menu-map__link" href="'+e+'" title="">'+s+"</a>\n                                </div>\n                            "},t=function(e,s){return'\n                                <div class="b-search-results__item">\n                                    <a class="b-search-results__link" href="'+e+'" title="" target="_blank">'+s+"</a>\n                                </div>\n                            "},i=[],n=e.labels,o=$(".js-map-list"),r=$(".js-search-result"),a=$(".js-search");$.each(e.search,function(e,s){i.push(s.text)});for(var l=0;l<n.length;l++)o.append(s(n[l].link,n[l].text));a.on("keyup",function(s){if("Enter"===s.key){var i=[],n=[],a=$(".ui-menu-item");if($(".js-search").autocomplete("close"),a.length){r.html("");var l=a.children();$.each(l,function(e,s){i.push($(s).text())}),$.each(i,function(s,t){var i=e.search.find(function(e){return e.text===t});n.push(i)}),$.each(n,function(e,s){r.append(t(s.link,s.text))})}else r.html(""),r.append('<div class="b-search-results__item">По вашему запросу ничего не найдено</div>')}""===s.target.value.trim()?(o.removeClass("hidden"),r.html("")):o.addClass("hidden")}),$(a).autocomplete({source:i,classes:{"ui-autocomplete":"b-search-results__list"},create:function(){window.$searchAutocomplete=$(".ui-menu")},open:function(){r.addClass("hidden")},close:function(){r.removeClass("hidden")}})}}})}function c(){function e(e,s){e.addClass("active");var t=e.data("tab");$.each(s,function(e,s){var i=$(s);i.data("tab")===t&&i.addClass("active")})}var s=$(".js-tab");$.each(s,function(s,t){var i=$(t),n=i.find(".js-tabs-link"),o=i.find(".js-tabs-content");n.on("click",function(){var e=$(this),s=e.data("tab");n.removeClass("active"),o.removeClass("active"),e.addClass("active"),$.each(o,function(e,t){var i=$(t);i.data("tab")===s&&i.addClass("active")})}),e($(n[0]),o)})}function d(){var e=$(".js-key-indicator-preloader"),s=e.data("end")||parseInt(e.text()),t=e.data("start")||0;i(e,!1)&&e.removeClass("js-key-indicator-preloader").velocity({tween:100},{easing:"spring",duration:1e3,progress:function(i,n){e.text(Math.round(t+(s-t)*n).toLocaleString("ru-RU"))}})}var p=.3,u=["bebe","beeb","ebeb","ebbe"],h=".js-on-visible",f="animated",v=h+"."+f,m=".js-is-visible",w="in-viewport",g="hold-outside-viewport";$(document).ready(function(){function e(e,s){function t(e){var s=e.getBoundingClientRect(),t=[["b",n],["b",o],["e",s.top],["e",s.bottom]].sort(function(e,s){return e[1]-s[1]}).map(function(e){return e[0]}).join("");return u.indexOf(t)>=0}var i=window.innerHeight,n=p*i,o=(1-p)*i;$(v).each(function(){!this.classList.contains(g)&&t(this)&&this.classList.remove(f)}),n=0,o=i,$(m).each(function(){this.classList.toggle(w,!this.classList.contains(g)&&t(this))})}var i=t(e,200),n=$(h+","+m);n.length&&($(window).off("scroll",i),$(".os-viewport").on("scroll",i),e(),n.each(function(){s(this,g,e,e)}))});var b=$(window);$(document).ready(function(){function e(){n.hasClass("open")&&(i.removeClass("no-scroll no-touch windows"),n.removeClass("open"),n.stop().fadeOut(300))}function s(e,s){var t=document,i=t.body,n=t.querySelector(s),o="client"+e;return e="scroll"+e,/CSS/.test(t.compatMode)?n[o]<n[e]:i[o]<i[e]}function t(){$(this).trigger("popup.open",[e]);var e=$(".b-popup[data-popup='"+$(this).attr("data-popup")+"']");e.length>0&&(r&&s("Height",".b-page-wrapper")&&i.addClass("windows"),n.removeClass("open"),n.fadeOut(300),i.addClass("no-scroll no-touch"),e.addClass("open"),e.css("display","flex").hide().fadeIn(300))}var i=$(".b-page-wrapper"),n=$(".b-popup"),o=$(".b-popup__content"),r=navigator.userAgent.toLowerCase().indexOf("windows")!==-1;$(".js-open-popup").on("popup.onClose",function(s){e()}),$(document).on("click",".js-open-popup",function(){$(this).trigger("popup.onOpen")}),$(".js-open-popup").on("popup.onOpen",function(){t.call(this)}),$(document).on("click",".js-close-popup",function(){e(),$(".js-menu-in-popup-back").length&&$(".js-menu-in-popup-back").trigger("click")}),$(document).on("keydown",function(s){27===s.keyCode&&e()}),$(document).mouseup(function(s){if(n.hasClass("open")){var t=window.$searchAutocomplete,i=$(".select2-container");o.is(s.target)||0!==o.has(s.target).length||t.is(s.target)||0!==t.has(s.target).length||i.is(s.target)||0!==i.has(s.target)||(console.log(i),e())}})}),o();var j=window.navigator.userAgent;(j.match(/iPad/i)||j.match(/iPhone/i))&&$("html").addClass("ios");var y;if($(".js-top-search").length){var k=$(".js-permutation-search"),S=$(".js-hidden"),T=$(".js-top-search"),x=$(".js-top-menu-desktop"),_=$(".js-permutation-menu-top"),C=$(".js-permutation-main"),F=$(".b-header__link-phone"),O=$(".b-lang"),q=$(".b-header__left");y=function(){window.innerWidth>=320&&window.innerWidth<768?(S.prepend(k),q.prepend(F),C.prepend(_)):window.innerWidth>=768&&window.innerWidth<1024?(T.prepend(k),C.prepend(_),q.prepend(F)):window.innerWidth>=1024&&window.innerWidth<1280?(T.prepend(k),x.prepend(_),q.prepend(F)):window.innerWidth>=1280&&(C.prepend(k),O.before(F),x.prepend(_))},y(),$(window).resize(function(){$(".js-top-search").length>0&&y()})}if($(".js-burger").on("click",function(){$(".js-burger-wrap").hasClass("active")?($(".js-burger-wrap").removeClass("active"),$(".b-page-wrapper").removeClass("active"),$("body").removeClass("no-scroll")):($(".js-burger-wrap").addClass("active"),$(".b-page-wrapper").addClass("active"),$("body").addClass("no-scroll"))}),$(".js-main-slider").length){var W=$(".js-main-slider"),A=$(".js-nav-slider"),I=$(".b-main-block__wrapper");W.slick({infinite:!0,slidesToShow:1,slidesToScroll:1,rows:0,dots:!1,fade:!0,arrows:!1,asNavFor:A,mobileFirst:!0,zIndex:2,responsive:[{breakpoint:1023,settings:{}}]}),A.slick({slidesToShow:2,slidesToScroll:1,asNavFor:W,dots:!1,focusOnSelect:!0,arrows:!1,mobileFirst:!0,responsive:[{breakpoint:1023,settings:{slidesToShow:6,slidesToScroll:1,vertical:!0,infinite:!1,variableWidth:!0,useTransform:!1}}]}),A[0].slick.$slides.each(function(){var e=this;$(this).on("mouseenter",function(){return $(e).trigger("click")})})}var L,N,z={overflowBehavior:{x:"hidden",y:"scroll"}},P={overflowBehavior:{x:"scroll",y:"hidden",clipAlways:!1}};s(document.body,"noscroll",function(){return r("hidden")},function(){return r("scroll")}),L=OverlayScrollbars(document.body,z),$(".js-scroll-menu").overlayScrollbars(z),N=OverlayScrollbars(document.body,z),$(".js-scroll-x").overlayScrollbars(P);var W=$(".js-history"),A=$(".js-nav-history"),I=$(".b-history__wrapper");$(".b-history__wrapper .js-next").on("click",function(){$(".js-history").slick("slickNext")}),$(".b-history__wrapper .js-prev").on("click",function(){$(".js-history").slick("slickPrev")}),W.slick({infinite:!0,slidesToShow:1,slidesToScroll:1,rows:0,dots:!1,fade:!1,arrows:!1,asNavFor:A,mobileFirst:!0,zIndex:2,responsive:[{breakpoint:1023,settings:{slidesToShow:1,vertical:!0,variableWidth:!1}}]});var M=function(e){var s=$(".js-history-nums-original"),t=s.height();s.css({top:0}),s.clone().removeClass("js-history-nums-original").addClass("js-history-nums-clone j0").css({top:0}).appendTo(".js-history-nums"),s.clone().removeClass("js-history-nums-original").addClass("js-history-nums-clone j1").css({top:"down"==e?t:-t}).appendTo(".js-history-nums"),s.css({position:"relative",display:"block"}),$(".js-history-nums-clone").css({position:"absolute",display:"block"})},B=function(e,s,t){var i="up",n=e.$slides.length-1;return t>s&&(i="down"),0==t&&s==n&&(i="down"),0==s&&t==n&&(i="up"),i};if(A.on("beforeChange",function(e,s,t,i){var n=B(s,t,i);$(".js-history-nums").css({overflow:"hidden"}),M(n);for(var o=function(e){return s.$slides.eq(e).find(".b-history__number").text().trim().split("")},r=o(t),a=o(i),l=0;l<r.length;l++)$('.js-history-nums-clone.j1 [data-index="'+l+'"]').text(a[l]),r[l]==a[l]?$('.js-history-nums-clone [data-index="'+l+'"]').css({opacity:0}):$('.js-history-nums-original [data-index="'+l+'"]').css({opacity:0});var c=$(".js-history-nums-original").height();$(".js-history-nums-clone.j0").animate({top:"down"==n?-c:c}),$(".js-history-nums-clone.j1").animate({top:0}),setTimeout(function(){$(".js-history-nums-clone").remove(),$(".js-history-nums-original [data-index]").css({opacity:1});for(var e=0;e<a.length;e++)$('.js-history-nums-original [data-index="'+e+'"]').text(a[e])},300)}).slick({slidesToShow:3,slidesToScroll:1,asNavFor:W,dots:!1,focusOnSelect:!0,arrows:!1,mobileFirst:!0,centerMode:!0,centerPadding:"40px",variableWidth:!0,responsive:[{breakpoint:767,settings:{slidesToShow:4}},{breakpoint:1023,settings:{slidesToShow:3,vertical:!0,variableWidth:!1,centerPadding:"50%"}}]}),$(".js-employees-slider").length){var W=$(".js-employees-slider"),I=$(".b-employees__slider");$(".b-employees__slider .js-next").on("click",function(){$(".js-employees-slider").slick("slickNext")}),$(".b-employees__slider .js-prev").on("click",function(){$(".js-employees-slider").slick("slickPrev")});var H=500,B=function(e,s,t){var i="left",n=e.$slides.length-1;return t>s&&(i="right"),0==t&&s==n&&(i="right"),0==s&&t==n&&(i="left"),i};W.on("init",function(e,s){W.siblings().find(".js-all").text(s.$slides.length)}).on("beforeChange",function(e,s,t,i){var n=s.$slides.eq(t),o=100*(n.width()+n.height())/n.width(),r=10,a=100,l=s.$slides.eq(t),c=s.$slides.eq(i),d=B(s,t,i);"right"==d?(l.addClass("show").css({"clip-path":"polygon(0 0, "+o+"% 0%, 100% 100%, 0% 100%)",path:0}).animate({path:o},{step:function(e){l.css({"clip-path":"polygon(0 0, "+(o-e-r)+"% 0%, "+(100-e-r)+"% 100%, 0% 100%)"});var s=-a*(e/o);l.find(".b-employees__images").css({transform:"translateX("+s+"px)"})},duration:H,complete:function(){l.css({"clip-path":""}).removeClass("show")}}),c.addClass("show").css({"clip-path":"polygon("+(-o+r)+"% 0%, "+(-o-100+r)+"% 0%, 100% 100%, 100% 100%)",path:0}).animate({path:o},{step:function(e,s){c.css({"clip-path":"polygon("+(o-e)+"% 0%, 100% 0%, 100% 100%,  "+(100-e)+"% 100%)"});var t=a-a*(e/o);c.find(".b-employees__images").css({transform:"translateX("+t+"px)"})},duration:H,complete:function(){c.css({"clip-path":""}).removeClass("show")}})):(l.addClass("show").css({"clip-path":"polygon(0% 0%, 100% 0%, 100% 100%, "+(100-o)+"% 100%)",path:0}).animate({path:o},{step:function(e){l.css({"clip-path":"polygon("+e+"% 0%, 100% 0%, 100% 100%, "+(100-o+e)+"% 100%)"});var s=a*(e/o);l.find(".b-employees__images").css({transform:"translateX("+s+"px)"})},duration:H,complete:function(){l.css({"clip-path":""}).removeClass("show")}}),c.addClass("show").css({"clip-path":"polygon(0% 0%, 0% 0%, "+(100-o)+"% 100%, 0% 100%)",path:0}).animate({path:o},{step:function(e,s){c.css({"clip-path":"polygon(0% 0%, "+(e-r)+"% 0%, "+(100-o+e-r)+"% 100%,  0% 100%)"});var t=a*(e/o)-a;c.find(".b-employees__images").css({transform:"translateX("+t+"px)"})},duration:H,complete:function(){c.css({"clip-path":""}).removeClass("show")}})),$(".js-employees-slider").siblings().find(".js-now").text(i+1),$(".js-employees-slider").siblings().find(".js-line").css({width:0}).animate({width:"100%"},H)}).slick({infinite:!0,slidesToShow:1,slidesToScroll:1,rows:0,speed:H,dots:!1,fade:!0,arrows:!1,mobileFirst:!0,zIndex:2,asNavFor:$(".js-employees-nav")}),$(".js-employees-nav").slick({slidesToShow:1,slidesToScroll:1,dots:!1,focusOnSelect:!0,arrows:!1,mobileFirst:!0,infinite:!0,asNavFor:W})}var W=$(".js-production-slider"),A=$(".js-production-nav");W.slick({infinite:!0,slidesToShow:1,slidesToScroll:1,rows:0,dots:!1,fade:!0,arrows:!1,asNavFor:A,mobileFirst:!0,zIndex:2}),A.on("init",function(){var e=$(this),s=e.find(".slick-slide");$.each(s,function(s,t){$(t).on("mousemove",function(){e.slick("slickGoTo",s,!0)})})}).slick({slidesToShow:2,slidesToScroll:1,asNavFor:W,dots:!1,focusOnSelect:!0,arrows:!1,mobileFirst:!0,variableWidth:!0,responsive:[{breakpoint:767,settings:{slidesToShow:6,slidesToScroll:1,vertical:!0,infinite:!1,variableWidth:!0,useTransform:!1}}]});var R;if($(".js-quote").length){var D=$(".js-quote-wrapper"),U=$(".js-quote"),X=$(".js-quote-desktop");R=function(){window.innerWidth>=320&&window.innerWidth<1024?D.append(U):window.innerWidth>=1024&&X.append(U)},R()}var W=$(".js-equipment-slider"),A=$(".js-equipment-nav"),I=$(".b-equipment-cart-slider__wrapper"),E=0,G=0;$(".b-equipment-cart-slider__wrapper .js-next").on("click",function(){$(".js-equipment-slider").slick("slickNext")}),$(".b-equipment-cart-slider__wrapper .js-prev").on("click",function(){$(".js-equipment-slider").slick("slickPrev")});var V=function(){var e=$(".js-equipment-filte.active a");return e.data("type")||"foto"};$(".js-equipment-filter").on("click",function(){var e=$(this);$(".js-equipment-filter").removeClass("active"),e.addClass("active");var s=e.find("[data-type]").data("type");W.slick("slickUnfilter"),A.slick("slickUnfilter"),W.slick("slickFilter",'[data-type="'+s+'"]'),A.slick("slickFilter",'[data-type="'+s+'"]');var t=0;$.each($(".b-equipment-cart-slider__item-nav").not(".slick-cloned"),function(e,s){$(s).attr("data-slick-index",t),t++}),"foto"===s?W.slick("slickGoTo",E):W.slick("slickGoTo",G)}),W.on("init",function(){setTimeout(function(){var e=V();W.slick("slickFilter",'[data-type="'+e+'"]')})}).slick({slidesToShow:1,slidesToScroll:1,rows:0,dots:!1,fade:!0,arrows:!1,nextArrow:I.parent().find(".js-next"),prevArrow:I.parent().find(".js-prev"),asNavFor:A,mobileFirst:!0,zIndex:2,infinite:!0}).on("afterChange",function(e,s,t){"foto"===s.$slides[t].dataset.type&&(E=t),"sketch"===s.$slides[t].dataset.type&&(G=t)}),A.on("init",function(){setTimeout(function(){var e=V();A.slick("slickFilter",'[data-type="'+e+'"]')})}).slick({slidesToShow:3,slidesToScroll:1,asNavFor:W,dots:!1,focusOnSelect:!0,arrows:!1,mobileFirst:!0,variableWidth:!0,infinite:!0}),$(document).ready(function(){var e=$(".js-media-slider"),s=$(".js-media-slider");e.slick({dots:!1,nextArrow:s.parent().find(".js-next"),prevArrow:s.parent().find(".js-prev"),infinite:!1,slidesToShow:4,slidesToScroll:1,rows:0,responsive:[{breakpoint:768,settings:{slidesToScroll:1,slidesToShow:1,rows:2,slidesPerRow:1}},{breakpoint:1024,settings:{rows:1,slidesToShow:2}},{breakpoint:1920,settings:{slidesToShow:3}}]})}),$(document).ready(function(){var e=$(".js-news-page-slider"),s=$(".js-news-page-slider");e.slick({dots:!1,nextArrow:s.parent().find(".js-next"),prevArrow:s.parent().find(".js-prev"),infinite:!1,slidesToShow:3,slidesToScroll:1,responsive:[{breakpoint:768,settings:"unslick"},{breakpoint:1024,settings:{slidesToShow:2,slidesToScroll:1}}]})}),a(),l(),$(document).ready(function(){$(".js-show-more").click(function(){$(window).width()<768&&$(".b-anchor-links__item").toggleClass("hide")}),$(document).on("click",".js-load-more",function(){var e=$(this),s=e.data("url"),t=e.data("target");$.ajax({url:s,success:function(e){e.success&&e.html&&($(t).append(e.html),$("body").trigger("reInitAccordion"))}})})}),$(document).ready(function(){var e={header:".b-accordion-item__activation",collapsible:!0,active:!1,heightStyle:"content",activate:function(){$("body").trigger("tab-accordion")}};$(".js-accordion").accordion(e);var s=function(){$(".js-accordion").accordion("destroy"),$(".js-accordion").accordion(e)};$("body").on("reInitAccordion",s)}),$(document).ready(function(){var e=$(".js-news-slider"),s=$(".js-news-slider");e.slick({dots:!1,nextArrow:s.parent().find(".js-next"),prevArrow:s.parent().find(".js-prev"),infinite:!1,slidesToShow:3,slidesToScroll:1,rows:0,responsive:[{breakpoint:768,settings:{slidesToScroll:1,slidesToShow:1,rows:2,slidesPerRow:1}},{breakpoint:1024,settings:{slidesToShow:2}}]})}),c(),$(document).ready(function(){$(".os-viewport").on("scroll",function(){var e=$(".js-key-indicator");e.each(function(){var e=$(this),s=e.data("end")||parseInt(e.text()),t=e.data("start")||0;i(e,!1)&&e.removeClass("js-key-indicator").velocity({tween:100},{easing:"spring",duration:1e3,progress:function(i,n){e.text(Math.round(t+(s-t)*n).toLocaleString("ru-RU"))}})})})}),$(document).ready(function(){var e=$(".js-underline");$(".js-tabs").tabs({beforeActivate:function(e,t){return s(t.newTab)},show:{effect:"fade",duration:300},hide:{effect:"fade",duration:300}});var s=function(s){e.css({width:s.width(),top:s.innerHeight()-e.innerHeight(),left:s.position().left})};s($(".b-tabs__item.ui-tabs-active")),$(window).on("resize",function(){clearTimeout(e);var e=setTimeout(function(){return s($(".b-tabs__item.ui-tabs-active"))},300)})}),$(document).ready(function(){$(".js-select").select2()}),setTimeout(function(){$(".b-preloader").fadeOut("300")},100),d(),$(".js-uploader").uploader({showThumbs:!0,addMore:!0,allowDuplicates:!1,extensions:["pdf","png","jpg","doc","docx","rtf"],maxSize:5,errors:{filesSize:"Превышен допустимый размер файла"},captions:{button:"Перетащите сюда файлы.<br/> doc, rtf, pdf, jpg, png."},dragDrop:{dragLeave:!0}})}document.addEventListener("DOMContentLoaded",e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImludGVybmFsLmpzIl0sIm5hbWVzIjpbImRvY3VtZW50UmVhZHkiLCJDbGFzc0V2ZW50IiwiZWwiLCJmdW5jIiwiY2FsbGJhY2siLCJtdXRhdGlvbnNMaXN0IiwibmV3Q2xhc3MiLCIkIiwibWFrZUFycmF5IiwiY2xhc3NMaXN0Iiwib2xkVmFsdWUiLCJvbGRDbGFzcyIsIm9sZCIsInNwbGl0IiwiYWRkZWQiLCJmaWx0ZXIiLCJjaGFuZ2VkIiwicmVtb3ZlZCIsImUiLCJ0aGlzIiwiaW5kZXhPZiIsIm1vIiwiTXV0YXRpb25PYnNlcnZlciIsIm9ic2VydmUiLCJhdHRyaWJ1dGVzIiwiYXR0cmlidXRlT2xkVmFsdWUiLCJvYnNlcnZlQ2xhc3NlcyIsIl9jbGFzcyIsInNob3ciLCJyZXNldCIsInRlc3QiLCJhcnIiLCJwcm9iZSIsImV2ZXJ5IiwiY2xhc3NBcnJheSIsImFsbCIsImxlbmd0aCIsInRocm90dGxlIiwibXMiLCJzYXZlZEFyZ3MiLCJzYXZlZFRoaXMiLCJpc1Rocm90dGxlZCIsImFyZ3VtZW50cyIsInNldFRpbWVvdXQiLCJhcHBseSIsImlzRWxlbWVudEluVmlldyIsImVsZW1lbnQiLCJwYXJ0aWFsIiwidW5kZWZpbmVkIiwiZXh0cmFUb3AiLCIkZWxlbWVudCIsImVsZW1lbnRPZmZzZXQiLCJvZmZzZXQiLCJwYWdlVG9wIiwiJHdpbmRvdyIsInNjcm9sbFRvcCIsInBhZ2VCb3R0b20iLCJoZWlnaHQiLCJwYWdlTGVmdCIsInNjcm9sbExlZnQiLCJwYWdlUmlnaHQiLCJ3aWR0aCIsImVsZW1lbnRUb3AiLCJ0b3AiLCJlbGVtZW50Qm90dG9tIiwib3V0ZXJIZWlnaHQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJlbGVtZW50TGVmdCIsImxlZnQiLCJlbGVtZW50UmlnaHQiLCJvdXRlcldpZHRoIiwiaXNJRSIsInVhIiwid2luZG93IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwibXNpZSIsInRyaWRlbnQiLCJTaG93SUVBbGVydCIsImFkZENsYXNzIiwic2V0T3ZlcmZsb3ciLCJvdmVybGF5U2Nyb2xsYmFyIiwib3B0aW9ucyIsIm92ZXJmbG93QmVoYXZpb3IiLCJ5IiwiaW5pdE1hcCIsIm1hcCIsImxuIiwiZGF0YSIsImxnIiwiaW1nIiwieW1hcHMiLCJyZWFkeSIsIm15TWFwIiwiTWFwIiwiY2VudGVyIiwiem9vbSIsIm15UGxhY2VtYXJrIiwiUGxhY2VtYXJrIiwiZ2V0Q2VudGVyIiwiaGludENvbnRlbnQiLCJpY29uTGF5b3V0IiwiaWNvbkltYWdlSHJlZiIsImljb25JbWFnZVNpemUiLCJpY29uSW1hZ2VPZmZzZXQiLCJnZW9PYmplY3RzIiwiYWRkIiwic2VhcmNoQXV0b2NvbXBsZXRlIiwiZm9ybSIsIm9uIiwicHJldmVudERlZmF1bHQiLCJ1cmwiLCJhamF4Iiwic3VjY2VzcyIsImNyZWF0ZUxhYmVsIiwibGluayIsInRleHQiLCJjcmVhdGVSZXN1bHRMaW5rIiwidGFncyIsImxhYmVscyIsIm1hcExpc3QiLCJzZWFyY2hSZXN1bHQiLCJpbnB1dFNlYXJjaCIsImVhY2giLCJzZWFyY2giLCJrZXkiLCJpdGVtIiwicHVzaCIsImkiLCJhcHBlbmQiLCJzZWFyY2hSZXN1bHRBcnIiLCJsaW5rQXJyIiwic2VhcmNoSXRlbXMiLCJhdXRvY29tcGxldGUiLCJodG1sIiwicmVzdWx0SXRlbSIsImNoaWxkcmVuIiwiYXJySXRlbSIsInJlc3VsdCIsImZpbmQiLCJ0YXJnZXQiLCJ2YWx1ZSIsInRyaW0iLCJyZW1vdmVDbGFzcyIsInNvdXJjZSIsImNsYXNzZXMiLCJ1aS1hdXRvY29tcGxldGUiLCJjcmVhdGUiLCIkc2VhcmNoQXV0b2NvbXBsZXRlIiwib3BlbiIsImNsb3NlIiwidGFicyIsImluaXQiLCIkdGFiTGlua3MiLCIkY29udGVudCIsInRhYkRhdGEiLCIkaXRlbSIsIiR0YWJDb250YWluZXIiLCIkdGhpcyIsIiRsaW5rIiwicHJlbG9hZCIsIiRlbGVtIiwiZW5kVmFsdWUiLCJwYXJzZUludCIsInN0YXJ0VmFsdWUiLCJ2ZWxvY2l0eSIsInR3ZWVuIiwiZWFzaW5nIiwiZHVyYXRpb24iLCJwcm9ncmVzcyIsImVsZW1lbnRzIiwiY29tcGxldGUiLCJNYXRoIiwicm91bmQiLCJ0b0xvY2FsZVN0cmluZyIsIk9GRlNFVCIsIklOU0lERV9QQVRURVJOUyIsIkFOSU1BVElPTl9DTEFTUyIsIkhJRERFTl9DTEFTUyIsIkFOSU1BVElPTl9ISURERU5fQ0xBU1MiLCJWSUVXUE9SVF9DTEFTUyIsIklOX0NMQVNTIiwiSE9MRF9DTEFTUyIsImRvY3VtZW50IiwiY2hlY2tFZGdlcyIsImluc2lkZSIsIm91dHNpZGUiLCJib3giLCJwYXR0ZXJuIiwiYm90dG9tIiwic29ydCIsImEiLCJiIiwiam9pbiIsInZpZXdwb3J0SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJjb250YWlucyIsInJlbW92ZSIsInRvZ2dsZSIsInRocl9jaGVja0VkZ2VzIiwiJGVsZW1lbnRzIiwib2ZmIiwiY2xvc2VQb3BVcCIsIiRwb3BVcCIsImhhc0NsYXNzIiwiJHBhZ2UiLCJzdG9wIiwiZmFkZU91dCIsImdldFNjcm9sbCIsInNjcm9sbCIsInNlbGVjdG9yIiwiZG9jIiwiYm9keSIsInF1ZXJ5U2VsZWN0b3IiLCJjbGllbnQiLCJjb21wYXRNb2RlIiwib3BlblBvcFVwIiwidHJpZ2dlciIsIiRwb3BVcERhdGUiLCJhdHRyIiwid2luZG93c09TIiwiY3NzIiwiaGlkZSIsImZhZGVJbiIsIiRwb3BVcENvbnRlbnQiLCJ0b0xvd2VyQ2FzZSIsImV2ZW50IiwiY2FsbCIsImtleUNvZGUiLCJtb3VzZXVwIiwiJGRyb3Bkb3duU2VsZWN0IiwiaXMiLCJoYXMiLCJjb25zb2xlIiwibG9nIiwibWF0Y2giLCJhZGFwdGl2ZUZpbHRlciIsIm1vYmlsZVNlYXJjaCIsInRhYmxldFNlYXJjaCIsInRhYmxldEJpZ1RvcCIsIm1lbnVUb3AiLCJtZW51IiwicGhvbmUiLCJsYW5nIiwicGhvbmVEZWZhdWx0IiwiaW5uZXJXaWR0aCIsInByZXBlbmQiLCJiZWZvcmUiLCJyZXNpemUiLCIkc2xpY2tFbGVtZW50IiwiJHNsaWNrTmF2IiwiJHNsaWNrV3JhcCIsInNsaWNrIiwiaW5maW5pdGUiLCJzbGlkZXNUb1Nob3ciLCJzbGlkZXNUb1Njcm9sbCIsInJvd3MiLCJkb3RzIiwiZmFkZSIsImFycm93cyIsImFzTmF2Rm9yIiwibW9iaWxlRmlyc3QiLCJ6SW5kZXgiLCJyZXNwb25zaXZlIiwiYnJlYWtwb2ludCIsInNldHRpbmdzIiwiZm9jdXNPblNlbGVjdCIsInZlcnRpY2FsIiwidmFyaWFibGVXaWR0aCIsInVzZVRyYW5zZm9ybSIsIiRzbGlkZXMiLCJfdGhpcyIsIm92ZXJsYXlTY3JvbGxiYXJ4IiwieCIsIm9wdGlvbnMyIiwiY2xpcEFsd2F5cyIsIk92ZXJsYXlTY3JvbGxiYXJzIiwib3ZlcmxheVNjcm9sbGJhcnMiLCJjbG9uZVllYXJzIiwiZGlyZWN0aW9uIiwiJG9yaWdpbmFsIiwiY2xvbmUiLCJhcHBlbmRUbyIsInBvc2l0aW9uIiwiZGlzcGxheSIsImRldGVjdERpcmVjdGlvbiIsImN1cnJlbnRTbGlkZSIsIm5leHRTbGlkZSIsIm1heCIsIm92ZXJmbG93IiwiZ2V0WWVhciIsImluZGV4IiwiZXEiLCJjdXJyZW50IiwibmV4dCIsIm9wYWNpdHkiLCJhbmltYXRlIiwiX2kiLCJjZW50ZXJNb2RlIiwiY2VudGVyUGFkZGluZyIsInNpYmxpbmdzIiwiayIsImltYWdlT2Zmc2V0IiwiJGN1cnJlbnQiLCIkbmV4dCIsImNsaXAtcGF0aCIsInBhdGgiLCJzdGVwIiwibm93IiwiZGlmZiIsInRyYW5zZm9ybSIsInNwZWVkIiwiJHNsaWRlciIsImlkeCIsImFkYXB0aXZlUXVvdGUiLCJxdW90ZVdyYXBwZXIiLCJxdW90ZSIsInF1b3RlRGVza3RvcCIsImN1cnJlbnRTbGlkZU9mRmlyc3QiLCJjdXJyZW50U2xpZGVPZlNlY29uZCIsImdldEZpbHRlciIsIiRmaWx0ZXIiLCJub3QiLCJzbGlkZSIsIm5leHRBcnJvdyIsInBhcmVudCIsInByZXZBcnJvdyIsInNsaWRlciIsImRhdGFzZXQiLCJ0eXBlIiwic2xpZGVzUGVyUm93IiwiY2xpY2siLCJ0b2dnbGVDbGFzcyIsImhlYWRlciIsImNvbGxhcHNpYmxlIiwiYWN0aXZlIiwiaGVpZ2h0U3R5bGUiLCJhY3RpdmF0ZSIsImFjY29yZGlvbiIsInJlSW5pdEFjY29yZGlvbiIsIiRlbGVtcyIsInVuZGVybGluZSIsImJlZm9yZUFjdGl2YXRlIiwidWkiLCJzZXRQb3NpdGlvblVuZGVybGluZSIsIm5ld1RhYiIsImVmZmVjdCIsImFjdGl2ZUVsZW1lbnQiLCJjbGVhclRpbWVvdXQiLCJ1bmRlcmxpbmVSZXNpemluZyIsInNlbGVjdDIiLCJ1cGxvYWRlciIsInNob3dUaHVtYnMiLCJhZGRNb3JlIiwiYWxsb3dEdXBsaWNhdGVzIiwiZXh0ZW5zaW9ucyIsIm1heFNpemUiLCJlcnJvcnMiLCJmaWxlc1NpemUiLCJjYXB0aW9ucyIsImJ1dHRvbiIsImRyYWdEcm9wIiwiZHJhZ0xlYXZlIiwiYWRkRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6IkFBQUEsY0FFQSxXQUNFLFFBQVNBLEtBaUVQLFFBQVNDLEdBQVdDLEVBQUlDLEdBVXRCLFFBQVNDLEdBQVNDLEdBQ2hCLEdBQUlDLEdBQVdDLEVBQUVDLFVBQVVOLEVBQUdPLFdBQzFCQyxFQUFXTCxFQUFjLEdBQUdLLFNBQzVCQyxFQUFXQyxJQUFRRixFQUFXQSxFQUFTRyxNQUFNLFNBQzdDQyxFQUFRUixFQUFTUyxPQUFPQyxFQUFTTCxHQUNqQ00sRUFBVU4sRUFBU0ksT0FBT0MsRUFBU1YsRUFDdkNILEdBQUtXLEVBQU9HLEVBQVNYLEVBQVVLLEdBQy9CQyxFQUFNTixFQUdSLFFBQVNVLEdBQVFFLEdBQ2YsTUFBT0MsTUFBS0MsUUFBUUYsR0FBSyxFQXBCM0IsR0FBSU4sR0FDQVMsRUFBSyxHQUFJQyxrQkFBaUJsQixFQU05QixPQUxBaUIsR0FBR0UsUUFBUXJCLEdBQ1RzQixZQUFZLEVBQ1pDLG1CQUFtQixJQUVyQkosRUFBR1QsSUFBTUEsRUFDRlMsRUFpQlQsUUFBU0ssR0FBZXhCLEVBQUl5QixFQUFRQyxFQUFNQyxH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ckIrTyxhQUFhQyxFQUNiLElBQUlBLEdBQW9CbFQsV0FBVyxXQUNqQyxNQUFPNlMsR0FBcUJqVixFQUFFLGtDQUM3QixTQUlQQSxFQUFFZ0wsVUFBVTNGLE1BQU0sV0FDaEJyRixFQUFFLGNBQWN1VixZQUdsQm5ULFdBQVcsV0FDVHBDLEVBQUUsZ0JBQWdCd00sUUFBUSxRQUN6QixLQXNCSC9DLElBRUF6SixFQUFFLGdCQUFnQndWLFVBQ2hCQyxZQUFjLEVBQ2RDLFNBQVcsRUFDWEMsaUJBQW1CLEVBQ25CQyxZQUFlLE1BQU8sTUFBTyxNQUFPLE1BQU8sT0FBUSxPQUNuREMsUUFBVyxFQUNYQyxRQUNFQyxVQUFhLG9DQUVmQyxVQUNFQyxPQUFVLHdEQUVaQyxVQUVFQyxXQUFhLEtBbUNuQm5MLFNBQVNvTCxpQkFBaUIsbUJBQW9CM1ciLCJmaWxlIjoiaW50ZXJuYWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gZG9jdW1lbnRSZWFkeSgpIHtcbiAgICAvKipcbiAgICAgKiDQktC10YDRgdC40Y8g0LTQu9GPIGVzNVxuICAgICAqINCh0L7Qt9C00LDQtdGCINC80LDRgdGB0LjQsiBNZWRpYVF1ZXJ5TGlzdCDQuCDRgdC70LXQtNC40YIg0LfQsCDQtdCz0L4g0L7QsdC90L7QstC70LXQvdC40LXQvFxuICAgICAqXG4gICAgICogQHBhcmFtICB7b2JqZWN0fSBxdWVyaWVzTGlzdCAtINCe0LHRitC10LrRgiDQstC40LTQsCB7IGRlZmF1bHQ6IGZvbywgJyhtaW4td2lkdGg6IDc2MHB4KSc6IGJhciB9XG4gICAgICogQHBhcmFtICB7ZnVuY3Rpb259IGZ1bmMgLSDQutC+0LvQu9Cx0Y3QuiDRhNGD0L3QutGG0LjRjywg0L/QtdGA0LLRi9C5INC/0LDRgNCw0LzQtdGC0YAg0LrQvtGC0L7RgNC+0LkgLSDRgtC10LrRg9GJ0LXQtSDQt9C90LDRh9C10L3QuNC1LFxuICAgICAqINCwINCy0YLQvtGA0L7QuSAtINGB0YLRgNC+0LrQsCDRgSDRgtC10LrRg9GJ0LjQvCDQvNC10LTQuNCwINC30LDQv9GA0L7RgdC+0LxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBNZWRpYUhhbmRsZXIocXVlcmllc0xpc3QsIGZ1bmMpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBmdW5jID0gZnVuY3Rpb24gZnVuYyhmKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBmKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVmYXVsdFF1ZXJ5O1xuICAgICAgdmFyIHF1ZXJ5TGlzdDtcbiAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSBxdWVyaWVzTGlzdC5kZWZhdWx0O1xuICAgICAgdmFyIHF1ZXJpZXMgPSAkLmV4dGVuZCh7fSwgcXVlcmllc0xpc3QpO1xuICAgICAgZGVsZXRlIHF1ZXJpZXMuZGVmYXVsdDtcbiAgICAgIGRlZmF1bHRRdWVyeSA9IHtcbiAgICAgICAgcXVlcnk6ICdkZWZhdWx0JyxcbiAgICAgICAgdmFsdWU6IGRlZmF1bHRWYWx1ZVxuICAgICAgfTtcbiAgICAgIHF1ZXJ5TGlzdCA9IE9iamVjdC5rZXlzKHF1ZXJpZXMpLm1hcChmdW5jdGlvbiAocXVlcnkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gcXVlcmllc1txdWVyeV07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGlzdDogd2luZG93Lm1hdGNoTWVkaWEocXVlcnkpLFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICBxdWVyeTogcXVlcnlcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgICAgcXVlcnlMaXN0LmZvckVhY2goZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgICBvYmplY3QubGlzdC5hZGRMaXN0ZW5lcihzZXRDdXJyZW50UXVlcnkpO1xuICAgICAgfSk7XG4gICAgICBzZXRDdXJyZW50UXVlcnkoKTtcblxuICAgICAgdGhpcy5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBxdWVyeUxpc3QuZm9yRWFjaChmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICAgICAgb2JqZWN0Lmxpc3QucmVtb3ZlTGlzdGVuZXIoc2V0Q3VycmVudFF1ZXJ5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHF1ZXJ5TGlzdCA9IG51bGw7XG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBzZXRDdXJyZW50UXVlcnkoKSB7XG4gICAgICAgIHZhciBjdXJyZW50ID0gcXVlcnlMaXN0LmZpbHRlcihmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdC5saXN0Lm1hdGNoZXM7XG4gICAgICAgIH0pWzBdIHx8IGRlZmF1bHRRdWVyeTtcbiAgICAgICAgZnVuYyhjdXJyZW50LnZhbHVlLCBjdXJyZW50LnF1ZXJ5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICA7XG4gICAgLyoqXG4gICAgICog0JLQtdGA0YHQuNGPINC00LvRjyBlczVcbiAgICAgKiDQodC70LXQtNC40YIg0LfQsCDQutC70LDRgdGB0LDQvNC4IERPTS3QvtCx0YrQtdC60YLQsCDQuCDQstGL0LfRi9Cy0LDQtdGCINGE0YPQvdC60YbQuNGOINC/0YDQuCDQuNC30LzQtdC90LXQvdC40Lgg0L3QsNCx0L7RgNCwINC60LvQsNGB0YHQvtCyLlxuICAgICAqXG4gICAgICogQHBhcmFtICB7RE9NLW9iamVjdH0gZWwgLSDQvtCx0YrQtdC60YIsINC30LAg0LrQvtGC0L7RgNGL0Lwg0LLQtdC00LXRgtGB0Y8g0L3QsNCx0LvRjtC00LXQvdC40LUuXG4gICAgICogQHBhcmFtICB7ZnVuY3Rpb259IGZ1bmMgLSDQutC+0LvQu9Cx0Y3QuiDRhNGD0L3QutGG0LjRjywg0L/QtdGA0LLRi9C5INC/0LDRgNCw0LzQtdGC0YAg0LrQvtGC0L7RgNC+0LkgLSDQtNC+0LHQsNCy0LvQtdC90L3Ri9C1INC60LvQsNGB0YHRiyxcbiAgICAgKiDQsCDQstGC0L7RgNC+0LkgLSDRg9Cx0YDQsNC90L3Ri9C1INC60LvQsNGB0YHRi1xuICAgICAqL1xuXG4gICAgZnVuY3Rpb24gQ2xhc3NFdmVudChlbCwgZnVuYykge1xuICAgICAgdmFyIG9sZDtcbiAgICAgIHZhciBtbyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGNhbGxiYWNrKTtcbiAgICAgIG1vLm9ic2VydmUoZWwsIHtcbiAgICAgICAgYXR0cmlidXRlczogdHJ1ZSxcbiAgICAgICAgYXR0cmlidXRlT2xkVmFsdWU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgbW8ub2xkID0gb2xkO1xuICAgICAgcmV0dXJuIG1vO1xuXG4gICAgICBmdW5jdGlvbiBjYWxsYmFjayhtdXRhdGlvbnNMaXN0KSB7XG4gICAgICAgIHZhciBuZXdDbGFzcyA9ICQubWFrZUFycmF5KGVsLmNsYXNzTGlzdCk7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IG11dGF0aW9uc0xpc3RbMF0ub2xkVmFsdWU7XG4gICAgICAgIHZhciBvbGRDbGFzcyA9IG9sZCB8fCAob2xkVmFsdWUgPyBvbGRWYWx1ZS5zcGxpdCgnICcpIDogW10pO1xuICAgICAgICB2YXIgYWRkZWQgPSBuZXdDbGFzcy5maWx0ZXIoY2hhbmdlZCwgb2xkQ2xhc3MpO1xuICAgICAgICB2YXIgcmVtb3ZlZCA9IG9sZENsYXNzLmZpbHRlcihjaGFuZ2VkLCBuZXdDbGFzcyk7XG4gICAgICAgIGZ1bmMoYWRkZWQsIHJlbW92ZWQsIG5ld0NsYXNzLCBvbGRDbGFzcyk7XG4gICAgICAgIG9sZCA9IG5ld0NsYXNzO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjaGFuZ2VkKGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5kZXhPZihlKSA8IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb2JzZXJ2ZUNsYXNzZXMoZWwsIF9jbGFzcywgc2hvdywgcmVzZXQpIHtcbiAgICAgIHZhciBjbGFzc0FycmF5ID0gX2NsYXNzLnNwbGl0KCcgJyk7XG5cbiAgICAgIHNob3cgPSB0eXBlb2Ygc2hvdyA9PT0gJ2Z1bmN0aW9uJyA/IHNob3cgOiBmdW5jdGlvbiAoKSB7fTtcbiAgICAgIHJlc2V0ID0gdHlwZW9mIHJlc2V0ID09PSAnZnVuY3Rpb24nID8gcmVzZXQgOiBmdW5jdGlvbiAoKSB7fTtcbiAgICAgIHJldHVybiBuZXcgQ2xhc3NFdmVudChlbCwgZnVuY3Rpb24gKGFkZGVkLCByZW1vdmVkLCBhbGwsIG9sZCkge1xuICAgICAgICBpZiAoY2xhc3NBcnJheS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgaWYgKCF0ZXN0KG9sZCwgY2xhc3NBcnJheSkgJiYgdGVzdChhbGwsIGNsYXNzQXJyYXkpKSB7XG4gICAgICAgICAgICBzaG93KCk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0ZXN0KG9sZCwgY2xhc3NBcnJheSkgJiYgIXRlc3QoYWxsLCBjbGFzc0FycmF5KSkge1xuICAgICAgICAgICAgcmVzZXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRlc3QoYWRkZWQsIGNsYXNzQXJyYXkpKSB7XG4gICAgICAgICAgICBzaG93KCk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0ZXN0KHJlbW92ZWQsIGNsYXNzQXJyYXkpKSB7XG4gICAgICAgICAgICByZXNldCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIHRlc3QoYXJyLCBwcm9iZSkge1xuICAgICAgICByZXR1cm4gcHJvYmUuZXZlcnkoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICByZXR1cm4gYXJyLmluZGV4T2YoZSkgPj0gMDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgO1xuICAgIC8qKlxuICAgICAqINCS0LXRgNGB0LjRjyDQtNC70Y8gZXM1XG4gICAgICog0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10YIg0LPQtdGC0YLQtdGAINC4INGB0LXRgtGC0LXRgCDQsiDQvtCx0YrQtdC60YJcbiAgICAgKi9cblxuICAgIGZ1bmN0aW9uIGRlZmluZVNldHRlcihvYmosIGZ1bmN0aW9ucykge1xuICAgICAgdmFyIHNoYWRvdyA9IHt9O1xuICAgICAgT2JqZWN0LmtleXMoZnVuY3Rpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKGtleSBpbiBvYmopIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzaGFkb3dba2V5XTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbCkge1xuICAgICAgICAgICAgdmFyIG9sZCA9IHNoYWRvd1trZXldO1xuXG4gICAgICAgICAgICBpZiAodmFsICE9PSBvbGQpIHtcbiAgICAgICAgICAgICAgc2hhZG93W2tleV0gPSB2YWw7XG4gICAgICAgICAgICAgIGZ1bmN0aW9uc1trZXldKHZhbCwgb2xkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgO1xuICAgIC8qXG4gICAge1xuICAgICAgICAnMTAlIC0gMjAlJzogZnVuY3Rpb24ocHJvZ3Jlc3MpIHt9LFxuICAgICAgICAnNTAlJzogZnVuY3Rpb24ocHJvZ3Jlc3MpIHt9LFxuICAgIH1cbiAgICAgYW5pbWF0aW9uc3RhcnRcbiAgICBhbmltYXRpb25lbmRcbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uUXVldWUobGlzdCwgZHVyYXRpb24sIHRocm90dGxlKSB7XG4gICAgICB2YXIgSU5fQUNUSU9OID0gJ2FjdGlvbic7XG4gICAgICB2YXIgT1VUID0gJ291dDsnO1xuICAgICAgdmFyIHBlcmNlbnRSZSA9IG5ldyBSZWdFeHAoJyhbLjAtOV0rKSUnLCAnZ2knKTtcbiAgICAgIHZhciBzZWNvbmRSZSA9IG5ldyBSZWdFeHAoJyhbLjAtOV0rKXMnLCAnZ2knKTtcbiAgICAgIHZhciBtaWxsaXNlY29uZFJlID0gbmV3IFJlZ0V4cCgnKFsuMC05XSspbXMnLCAnZ2knKTtcbiAgICAgIHZhciB0aW1lU3RhcnQgPSBudWxsO1xuICAgICAgdmFyIGZpcmVkTGlzdCA9IFtdO1xuICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgdmFyIHN0b3BGbGFnO1xuICAgICAgdmFyIGZyYW1lID0gMDtcbiAgICAgIHRocm90dGxlID0gdGhyb3R0bGUgfHwgMTtcblxuICAgICAgaWYgKGlzTmFOKGR1cmF0aW9uKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnZhbGlkIGFyZ3VtZW50cycpO1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2JlZ2luJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGltZVN0YXJ0O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZW5kJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGltZVN0YXJ0ID8gdGltZVN0YXJ0ICsgZHVyYXRpb24gOiBudWxsO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnaW5BY3Rpb24nLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBCb29sZWFuKHRpbWVTdGFydCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB0aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXNlbGYuaW5BY3Rpb24pIHtcbiAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHNlbGYuaW5BY3Rpb24pIHtcbiAgICAgICAgICBzdG9wRmxhZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMubGlzdCA9IE9iamVjdC5rZXlzKGxpc3QpLm1hcChmdW5jdGlvbiAoa2V5LCBpZCkge1xuICAgICAgICB2YXIgc3RhcnQ7XG4gICAgICAgIHZhciBlbmQ7XG4gICAgICAgIHZhciB0aW1pbmcgPSBrZXkuc3BsaXQoJy0nKTtcbiAgICAgICAgdGltaW5nLmZvckVhY2goZnVuY3Rpb24gKGUsIGksIGFycikge1xuICAgICAgICAgIHZhciBzdHIgPSBlLnRyaW0oKTtcbiAgICAgICAgICB2YXIgdW5pdHMgPSAxO1xuICAgICAgICAgIHVuaXRzID0gLyhbLjAtOV0rKSUvLnRlc3Qoc3RyKSA/IDAuMDEgOiB1bml0cztcbiAgICAgICAgICB1bml0cyA9IC8oWy4wLTldKylzLy50ZXN0KHN0cikgPyAxMDAwIC8gZHVyYXRpb24gOiB1bml0cztcbiAgICAgICAgICB1bml0cyA9IC8oWy4wLTldKyltcy8udGVzdChzdHIpID8gMSAvIGR1cmF0aW9uIDogdW5pdHM7XG4gICAgICAgICAgYXJyW2ldID0gcGFyc2VGbG9hdChzdHIpICogdW5pdHM7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICBzdGFydDogaXNOYU4odGltaW5nWzBdKSA/IC0xIDogdGltaW5nWzBdLFxuICAgICAgICAgIGVuZDogaXNOYU4odGltaW5nWzFdKSA/IHRpbWluZ1swXSA6IHRpbWluZ1sxXSxcbiAgICAgICAgICBmdW5jOiB0eXBlb2YgbGlzdFtrZXldID09PSAnZnVuY3Rpb24nID8gbGlzdFtrZXldIDogZnVuY3Rpb24gKCkge31cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiBzdGVwKHRpbWVzdGFtcCkge1xuICAgICAgICB2YXIgcHJvZ3Jlc3M7XG4gICAgICAgIGZyYW1lKys7XG5cbiAgICAgICAgaWYgKCF0aW1lU3RhcnQgJiYgdHlwZW9mIHNlbGYuYW5pbWF0aW9uc3RhcnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBzZWxmLmFuaW1hdGlvbnN0YXJ0LmNhbGwoc2VsZik7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lU3RhcnQgPSB0aW1lU3RhcnQgfHwgdGltZXN0YW1wO1xuXG4gICAgICAgIGlmICh0aW1lc3RhbXAgPD0gc2VsZi5lbmQgJiYgIXN0b3BGbGFnKSB7XG4gICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0b3BGbGFnID0gbnVsbDtcbiAgICAgICAgICB0aW1lU3RhcnQgPSBudWxsO1xuICAgICAgICAgIGZpcmVkTGlzdCA9IFtdO1xuICAgICAgICAgIGZyYW1lID0gMDtcblxuICAgICAgICAgIGlmICh0eXBlb2Ygc2VsZi5hbmltYXRpb25lbmQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHNlbGYuYW5pbWF0aW9uZW5kLmNhbGwoc2VsZik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGZyYW1lICUgdGhyb3R0bGUpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBwcm9ncmVzcyA9IG1hcCh0aW1lc3RhbXAsIHNlbGYuYmVnaW4sIHNlbGYuZW5kLCAwLCAxKTtcbiAgICAgICAgc2VsZi5saXN0LmZpbHRlcihmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHZhciBpbkFjdGlvbiA9IGUuc3RhcnQgPD0gcHJvZ3Jlc3MgJiYgcHJvZ3Jlc3MgPD0gZS5lbmQ7IC8vINC+0LTQuNC90L7Rh9C90YvQuSDQstGL0LfQvtCyXG5cbiAgICAgICAgICBpZiAoZS5zdGFydCA9PT0gZS5lbmQgJiYgZS5zdGFydCA8PSBwcm9ncmVzcyAmJiAhZmlyZWRMaXN0W2UuaWRdKSB7XG4gICAgICAgICAgICBmaXJlZExpc3RbZS5pZF0gPSBPVVQ7XG4gICAgICAgICAgICBlLmZ1bmMuY2FsbChzZWxmLCAwLCAnb25jZScpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH0gLy8g0L/QtdGA0LLRi9C5INCy0YvQt9C+0LJcblxuXG4gICAgICAgICAgaWYgKGluQWN0aW9uICYmICFmaXJlZExpc3RbZS5pZF0pIHtcbiAgICAgICAgICAgIGZpcmVkTGlzdFtlLmlkXSA9IElOX0FDVElPTjtcbiAgICAgICAgICAgIGUuZnVuYy5jYWxsKHNlbGYsIDAsICdmaXJzdCcpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH0gLy8g0L/QvtGB0LvQtdC00L3QuNC5INCy0YvQt9C+0LJcblxuXG4gICAgICAgICAgaWYgKCFpbkFjdGlvbiAmJiBmaXJlZExpc3RbZS5pZF0gPT09IElOX0FDVElPTikge1xuICAgICAgICAgICAgZmlyZWRMaXN0W2UuaWRdID0gT1VUO1xuICAgICAgICAgICAgZS5mdW5jLmNhbGwoc2VsZiwgMSwgJ2xhc3QnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gaW5BY3Rpb247XG4gICAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBlLmZ1bmMuY2FsbChzZWxmLCBtYXAocHJvZ3Jlc3MsIGUuc3RhcnQsIGUuZW5kLCAwLCAxKSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1hcCh4LCBpbk1pbiwgaW5NYXgsIG91dE1pbiwgb3V0TWF4KSB7XG4gICAgICByZXR1cm4gKHggLSBpbk1pbikgKiAob3V0TWF4IC0gb3V0TWluKSAvIChpbk1heCAtIGluTWluKSArIG91dE1pbjtcbiAgICB9XG5cbiAgICA7XG4gICAgdmFyIE9GRlNFVCA9IDAuMztcbiAgICB2YXIgSU5TSURFX1BBVFRFUk5TID0gWydiZWJlJywgJ2JlZWInLCAnZWJlYicsICdlYmJlJ107XG4gICAgdmFyIEFOSU1BVElPTl9DTEFTUyA9ICcuanMtb24tdmlzaWJsZSc7IC8vINGBINGC0L7Rh9C60L7QuVxuXG4gICAgdmFyIEhJRERFTl9DTEFTUyA9ICdhbmltYXRlZCc7IC8vINCx0LXQtyDRgtC+0YfQutC4XG5cbiAgICB2YXIgQU5JTUFUSU9OX0hJRERFTl9DTEFTUyA9IEFOSU1BVElPTl9DTEFTUyArICcuJyArIEhJRERFTl9DTEFTUztcbiAgICB2YXIgVklFV1BPUlRfQ0xBU1MgPSAnLmpzLWlzLXZpc2libGUnOyAvLyDRgSDRgtC+0YfQutC+0LlcblxuICAgIHZhciBJTl9DTEFTUyA9ICdpbi12aWV3cG9ydCc7IC8vINCx0LXQtyDRgtC+0YfQutC4XG5cbiAgICB2YXIgSE9MRF9DTEFTUyA9ICdob2xkLW91dHNpZGUtdmlld3BvcnQnOyAvLyDQsdC10Lcg0YLQvtGH0LrQuFxuXG4gICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRocl9jaGVja0VkZ2VzID0gdGhyb3R0bGUoY2hlY2tFZGdlcywgMjAwKTtcbiAgICAgIHZhciAkZWxlbWVudHMgPSAkKEFOSU1BVElPTl9DTEFTUyArICcsJyArIFZJRVdQT1JUX0NMQVNTKTtcblxuICAgICAgaWYgKCRlbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgJCh3aW5kb3cpLm9mZignc2Nyb2xsJywgdGhyX2NoZWNrRWRnZXMpO1xuICAgICAgICAkKCcub3Mtdmlld3BvcnQnKS5vbignc2Nyb2xsJywgdGhyX2NoZWNrRWRnZXMpO1xuICAgICAgICBjaGVja0VkZ2VzKCk7XG4gICAgICAgICRlbGVtZW50cy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBvYnNlcnZlQ2xhc3Nlcyh0aGlzLCBIT0xEX0NMQVNTLCBjaGVja0VkZ2VzLCBjaGVja0VkZ2VzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNoZWNrRWRnZXMoaW5zaWRlLCBvdXRzaWRlKSB7XG4gICAgICAgIHZhciB2aWV3cG9ydEhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgICAgdmFyIHRvcCA9IE9GRlNFVCAqIHZpZXdwb3J0SGVpZ2h0O1xuICAgICAgICB2YXIgYm90dG9tID0gKDEgLSBPRkZTRVQpICogdmlld3BvcnRIZWlnaHQ7XG4gICAgICAgICQoQU5JTUFUSU9OX0hJRERFTl9DTEFTUykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLmNsYXNzTGlzdC5jb250YWlucyhIT0xEX0NMQVNTKSAmJiB0ZXN0KHRoaXMpKSB7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoSElEREVOX0NMQVNTKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0b3AgPSAwO1xuICAgICAgICBib3R0b20gPSB2aWV3cG9ydEhlaWdodDtcbiAgICAgICAgJChWSUVXUE9SVF9DTEFTUykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdGhpcy5jbGFzc0xpc3QudG9nZ2xlKElOX0NMQVNTLCAhdGhpcy5jbGFzc0xpc3QuY29udGFpbnMoSE9MRF9DTEFTUykgJiYgdGVzdCh0aGlzKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIHRlc3QoZWwpIHtcbiAgICAgICAgICB2YXIgYm94ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgdmFyIHBhdHRlcm4gPSBbWydiJywgdG9wXSwgWydiJywgYm90dG9tXSwgWydlJywgYm94LnRvcF0sIFsnZScsIGJveC5ib3R0b21dXS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYVsxXSAtIGJbMV07XG4gICAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZVswXTtcbiAgICAgICAgICB9KS5qb2luKCcnKTtcbiAgICAgICAgICByZXR1cm4gSU5TSURFX1BBVFRFUk5TLmluZGV4T2YocGF0dGVybikgPj0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgbXMpIHtcbiAgICAgIHZhciBpc1Rocm90dGxlZCA9IGZhbHNlO1xuICAgICAgdmFyIHNhdmVkQXJncztcbiAgICAgIHZhciBzYXZlZFRoaXM7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaXNUaHJvdHRsZWQpIHtcbiAgICAgICAgICBzYXZlZEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgICAgc2F2ZWRUaGlzID0gdGhpcztcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpc1Rocm90dGxlZCA9IHRydWU7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlzVGhyb3R0bGVkID0gZmFsc2U7XG4gICAgICAgICAgZnVuYy5hcHBseShzYXZlZFRoaXMsIHNhdmVkQXJncyk7XG4gICAgICAgICAgc2F2ZWRBcmdzID0gc2F2ZWRUaGlzID0gbnVsbDtcbiAgICAgICAgfSwgbXMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICA7XG4gICAgdmFyICR3aW5kb3cgPSAkKHdpbmRvdyk7XG4gICAgLyoqXHJcbiAgICAgKiDQn9GA0L7QstC10YDQutCwINGN0LvQtdC80LXQvdGC0LAg0L3QsCDQvdCw0YXQvtC20LTQtdC90LjQtSDQsiDQvtCx0LvQsNGB0YLQuCDQstC40LTQuNC80L7RgdGC0Lgg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GB0Y8gKNC+0LrQvdC1KVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGVsZW1lbnQgINCt0LvQtdC80LXQvdGCINC00LvRjyDQv9GA0L7QstC10YDQutC4XHJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHBhcnRpYWwg0JLQvtC30LLRgNCw0YnQsNGC0YwgdHJ1ZSDRgNC10LfRg9C70YzRgtCw0YIsINC10YHQu9C4INCy0LjQtNC90LAg0YfQsNGB0YLRjCDRjdC70LXQvNC10L3RgtCwICjQtdGB0LvQuCBwYXJ0aWFsPT1mYWxzZSwg0YLQviDRjdC70LXQvNC10L3RgiDQtNC+0LvQttC10L0g0LHRi9GC0Ywg0L/QvtC70L3QvtGB0YLRjNGOINCy0LjQtNC10L0pXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZXh0cmFUb3Ag0J3QsNC00LHQsNCy0L7Rh9C90L7QtSDQt9C90LDRh9C10L3QuNC1INC/0YDQuCDQv9GA0L7QstC10YDQutC1INCy0LXRgNGF0L3QtdC5INCz0YDQsNC90LjRhtGLINGG0LXQu9C10LLQvtCz0L4g0Y3Qu9C10LzQtdC90YLQsCAo0L3QsNC/0YDQuNC80LXRgCwg0LXRgdC70Lgg0L3QsCDRgdGC0YDQsNC90LjRhtC1INC10YHRgtGMIGZpeGVkINGI0LDQv9C60LApXHJcbiAgICAgKi9cblxuICAgIGZ1bmN0aW9uIGlzRWxlbWVudEluVmlldyhlbGVtZW50KSB7XG4gICAgICB2YXIgcGFydGlhbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogdHJ1ZTtcbiAgICAgIHZhciBleHRyYVRvcCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMDtcblxuICAgICAgaWYgKCFlbGVtZW50Lmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciAkZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgICB2YXIgZWxlbWVudE9mZnNldCA9ICRlbGVtZW50Lm9mZnNldCgpO1xuICAgICAgZWxlbWVudCA9ICRlbGVtZW50WzBdOyAvLyDQldGB0LvQuCDQsiDRhNGD0L3QutGG0LjRjiDQv9GA0L7QutC40L3Rg9C70LggalF1ZXJ5INCx0YrQtdC60YJcblxuICAgICAgdmFyIHBhZ2VUb3AgPSAkd2luZG93LnNjcm9sbFRvcCgpICsgZXh0cmFUb3A7XG4gICAgICB2YXIgcGFnZUJvdHRvbSA9IHBhZ2VUb3AgKyAkd2luZG93LmhlaWdodCgpO1xuICAgICAgdmFyIHBhZ2VMZWZ0ID0gJHdpbmRvdy5zY3JvbGxMZWZ0KCk7XG4gICAgICB2YXIgcGFnZVJpZ2h0ID0gcGFnZUxlZnQgKyAkd2luZG93LndpZHRoKCk7XG4gICAgICB2YXIgZWxlbWVudFRvcCA9IGVsZW1lbnRPZmZzZXQudG9wO1xuICAgICAgdmFyIGVsZW1lbnRCb3R0b20gPSAkZWxlbWVudC5vdXRlckhlaWdodCgpID8gZWxlbWVudFRvcCArICRlbGVtZW50Lm91dGVySGVpZ2h0KCkgOiBlbGVtZW50VG9wICsgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICB2YXIgZWxlbWVudExlZnQgPSBlbGVtZW50T2Zmc2V0LmxlZnQ7XG4gICAgICB2YXIgZWxlbWVudFJpZ2h0ID0gJGVsZW1lbnQub3V0ZXJXaWR0aCgpID8gZWxlbWVudExlZnQgKyAkZWxlbWVudC5vdXRlcldpZHRoKCkgOiBlbGVtZW50VG9wICsgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aDtcblxuICAgICAgaWYgKHBhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIHBhZ2VUb3AgPCBlbGVtZW50Qm90dG9tICYmIHBhZ2VCb3R0b20gPiBlbGVtZW50VG9wICYmIHBhZ2VMZWZ0IDwgZWxlbWVudFJpZ2h0ICYmIHBhZ2VSaWdodCA+IGVsZW1lbnRMZWZ0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHBhZ2VUb3AgPCBlbGVtZW50VG9wICYmIHBhZ2VCb3R0b20gPiBlbGVtZW50Qm90dG9tICYmIHBhZ2VMZWZ0IDwgZWxlbWVudExlZnQgJiYgcGFnZVJpZ2h0ID4gZWxlbWVudFJpZ2h0O1xuICAgICAgfVxuICAgIH1cblxuICAgIDsgLy8gPT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyByb2JpbnpvbjogcG9wdXAuanNcbiAgICAvLyAxNS4wMS4yMDE4OiBBbWVkb21hcnlcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyDQntGC0LrRgNGL0YLQuNC1INC/0L7Qv9CQ0L/QsCDQuCDQt9Cw0L/RgNC10YIg0YHQutGA0L7Qu9CwINC90LAgYm9keVxuICAgIC8vID09PT09PT09PT09PT09PT09PT09XG5cbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHBhZ2UgPSAkKFwiLmItcGFnZS13cmFwcGVyXCIpO1xuICAgICAgdmFyICRwb3BVcCA9ICQoXCIuYi1wb3B1cFwiKTtcbiAgICAgIHZhciAkcG9wVXBDb250ZW50ID0gJChcIi5iLXBvcHVwX19jb250ZW50XCIpO1xuICAgICAgdmFyIHdpbmRvd3NPUyA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKFwid2luZG93c1wiKSAhPT0gLTE7XG4gICAgICAkKFwiLmpzLW9wZW4tcG9wdXBcIikub24oXCJwb3B1cC5vbkNsb3NlXCIsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBjbG9zZVBvcFVwKCk7XG4gICAgICB9KTsgLy8g0JfQsNC60YDRi9GC0LjQtSDQv9C+0L/QkNC/0L7QslxuXG4gICAgICBmdW5jdGlvbiBjbG9zZVBvcFVwKCkge1xuICAgICAgICAvLyDQn9GA0L7QstC10YDRj9C10Lwg0L7RgtC60YDRi9GCINC70Lgg0L/QvtC/0JDQv1xuICAgICAgICBpZiAoJHBvcFVwLmhhc0NsYXNzKFwib3BlblwiKSkge1xuICAgICAgICAgICRwYWdlLnJlbW92ZUNsYXNzKFwibm8tc2Nyb2xsIG5vLXRvdWNoIHdpbmRvd3NcIik7XG4gICAgICAgICAgJHBvcFVwLnJlbW92ZUNsYXNzKFwib3BlblwiKTtcbiAgICAgICAgICAkcG9wVXAuc3RvcCgpLmZhZGVPdXQoMzAwKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyDQn9GA0L7QstC10YDQutCwINC90LAg0L3QsNC70LjRh9C40LUg0YHQutGA0L7Qu9Cw0LBcblxuXG4gICAgICBmdW5jdGlvbiBnZXRTY3JvbGwoc2Nyb2xsLCBzZWxlY3Rvcikge1xuICAgICAgICB2YXIgZG9jID0gZG9jdW1lbnQ7XG4gICAgICAgIHZhciBib2R5ID0gZG9jLmJvZHk7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICAgICAgICB2YXIgY2xpZW50ID0gXCJjbGllbnRcIiArIHNjcm9sbDtcbiAgICAgICAgc2Nyb2xsID0gXCJzY3JvbGxcIiArIHNjcm9sbDtcbiAgICAgICAgcmV0dXJuIC9DU1MvLnRlc3QoZG9jLmNvbXBhdE1vZGUpID8gZWxlbWVudFtjbGllbnRdIDwgZWxlbWVudFtzY3JvbGxdIDogYm9keVtjbGllbnRdIDwgYm9keVtzY3JvbGxdO1xuICAgICAgfSAvLyDQmtC70LjQuiDQv9C+INGB0YHRi9C70LrQtSDQvtGC0LrRgNGL0LLQsNGO0YnQtdC5INC/0L7Qv9CQ0L9cblxuXG4gICAgICAkKGRvY3VtZW50KS5vbihcImNsaWNrXCIsIFwiLmpzLW9wZW4tcG9wdXBcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAkKHRoaXMpLnRyaWdnZXIoXCJwb3B1cC5vbk9wZW5cIik7XG4gICAgICB9KTsgLy8g0JrQsNGB0YLQvtC80L3QvtC1INGB0L7QsdGL0YLQuNC1INC+0YLQutGA0YvRgtC40LUg0L/QvtC/0JDQv1xuXG4gICAgICAkKFwiLmpzLW9wZW4tcG9wdXBcIikub24oXCJwb3B1cC5vbk9wZW5cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBvcGVuUG9wVXAuY2FsbCh0aGlzKTtcbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiBvcGVuUG9wVXAoKSB7XG4gICAgICAgIC8vINCh0L7Qt9C00LDQtdC8INGC0LjQv9CwIGNhbGxiYWNrXG4gICAgICAgICQodGhpcykudHJpZ2dlcihcInBvcHVwLm9wZW5cIiwgWyRwb3BVcERhdGVdKTtcbiAgICAgICAgdmFyICRwb3BVcERhdGUgPSAkKFwiLmItcG9wdXBbZGF0YS1wb3B1cD0nXCIgKyAkKHRoaXMpLmF0dHIoXCJkYXRhLXBvcHVwXCIpICsgXCInXVwiKTsgLy8g0J/RgNC+0LLQtdGA0Y/QtdC8INC10YHRgtGMINC70Lgg0L3QsNC8INGH0YLQviDQvtGC0LrRgNGL0YLRjFxuXG4gICAgICAgIGlmICgkcG9wVXBEYXRlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAvLyDQn9GA0L7QstC10YDRj9C10Lwg0L7Qv9C10YDQsNGG0LjQvtC90L3Rg9GOINGB0LjRgdGC0LXQvNGDINC90LAgV2luINC4INCh0LrRgNC+0LvQu1xuICAgICAgICAgIGlmICh3aW5kb3dzT1MgJiYgZ2V0U2Nyb2xsKFwiSGVpZ2h0XCIsIFwiLmItcGFnZS13cmFwcGVyXCIpKSB7XG4gICAgICAgICAgICAkcGFnZS5hZGRDbGFzcyhcIndpbmRvd3NcIik7XG4gICAgICAgICAgfSAvLyDQl9Cw0LrRgNGL0LLQsNC10Lwg0L/QtdGA0LXQtCDQvtGC0LrRgNGL0YLQuNC80LUg0LTRgNGD0LPQuNC1XG5cblxuICAgICAgICAgICRwb3BVcC5yZW1vdmVDbGFzcyhcIm9wZW5cIik7XG4gICAgICAgICAgJHBvcFVwLmZhZGVPdXQoMzAwKTtcbiAgICAgICAgICAkcGFnZS5hZGRDbGFzcyhcIm5vLXNjcm9sbCBuby10b3VjaFwiKTtcbiAgICAgICAgICAkcG9wVXBEYXRlLmFkZENsYXNzKFwib3BlblwiKTtcbiAgICAgICAgICAkcG9wVXBEYXRlLmNzcyhcImRpc3BsYXlcIiwgXCJmbGV4XCIpLmhpZGUoKS5mYWRlSW4oMzAwKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyDQmtC70LjQuiDQv9C+INCX0LDQutGA0YvRgtC40Y4g0L/QvtC/0JDQv9C+0LJcblxuXG4gICAgICAkKGRvY3VtZW50KS5vbihcImNsaWNrXCIsIFwiLmpzLWNsb3NlLXBvcHVwXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xvc2VQb3BVcCgpO1xuXG4gICAgICAgIGlmICgkKFwiLmpzLW1lbnUtaW4tcG9wdXAtYmFja1wiKS5sZW5ndGgpIHtcbiAgICAgICAgICAkKFwiLmpzLW1lbnUtaW4tcG9wdXAtYmFja1wiKS50cmlnZ2VyKFwiY2xpY2tcIik7XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyDQltC80Y/QuiDQv9C+IEVzY1xuXG4gICAgICAkKGRvY3VtZW50KS5vbihcImtleWRvd25cIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmIChldmVudC5rZXlDb2RlID09PSAyNykge1xuICAgICAgICAgIGNsb3NlUG9wVXAoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAkKGRvY3VtZW50KS5tb3VzZXVwKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICgkcG9wVXAuaGFzQ2xhc3MoXCJvcGVuXCIpKSB7XG4gICAgICAgICAgLy8g0JrQu9C40Log0L3QtSDQv9C+INCa0L7QvdGC0LXQvdGC0YMg0Lgg0L3QtSDQtdCz0L4g0LTQvtGH0LrQsNC8XG4gICAgICAgICAgLy8g0Jgg0L3QtSDQv9C+INC80LXQvdGOINCw0LLRgtC+0LfQsNC/0L7Qu9C90LXQvdC40Y9cbiAgICAgICAgICB2YXIgJHNlYXJjaEF1dG9jb21wbGV0ZSA9IHdpbmRvdy4kc2VhcmNoQXV0b2NvbXBsZXRlO1xuICAgICAgICAgIHZhciAkZHJvcGRvd25TZWxlY3QgPSAkKFwiLnNlbGVjdDItY29udGFpbmVyXCIpO1xuXG4gICAgICAgICAgaWYgKCEkcG9wVXBDb250ZW50LmlzKGUudGFyZ2V0KSAmJiAkcG9wVXBDb250ZW50LmhhcyhlLnRhcmdldCkubGVuZ3RoID09PSAwICYmICEkc2VhcmNoQXV0b2NvbXBsZXRlLmlzKGUudGFyZ2V0KSAmJiAkc2VhcmNoQXV0b2NvbXBsZXRlLmhhcyhlLnRhcmdldCkubGVuZ3RoID09PSAwICYmICEkZHJvcGRvd25TZWxlY3QuaXMoZS50YXJnZXQpICYmICRkcm9wZG93blNlbGVjdC5oYXMoZS50YXJnZXQpID09PSAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygkZHJvcGRvd25TZWxlY3QpO1xuICAgICAgICAgICAgY2xvc2VQb3BVcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgO1xuXG4gICAgZnVuY3Rpb24gaXNJRSgpIHtcbiAgICAgIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50OyAvL0NoZWNrIHRoZSB1c2VyQWdlbnQgcHJvcGVydHkgb2YgdGhlIHdpbmRvdy5uYXZpZ2F0b3Igb2JqZWN0XG5cbiAgICAgIHZhciBtc2llID0gdWEuaW5kZXhPZignTVNJRSAnKTsgLy8gSUUgMTAgb3Igb2xkZXJcblxuICAgICAgdmFyIHRyaWRlbnQgPSB1YS5pbmRleE9mKCdUcmlkZW50LycpOyAvL0lFIDExXG5cbiAgICAgIHJldHVybiBtc2llID4gMCB8fCB0cmlkZW50ID4gMDtcbiAgICB9IC8vZnVuY3Rpb24gdG8gc2hvdyBhbGVydCBpZiBpdCdzIElFXG5cblxuICAgIGZ1bmN0aW9uIFNob3dJRUFsZXJ0KCkge1xuICAgICAgaWYgKGlzSUUoKSkge1xuICAgICAgICAkKCdodG1sJykuYWRkQ2xhc3MoJ25vLW9iamVjdC1maXQnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoJ2h0bWwnKS5hZGRDbGFzcygnb2JqZWN0LWZpdCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIFNob3dJRUFsZXJ0KCk7XG4gICAgdmFyIHVzZXJBZ2VudCA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gICAgaWYgKHVzZXJBZ2VudC5tYXRjaCgvaVBhZC9pKSB8fCB1c2VyQWdlbnQubWF0Y2goL2lQaG9uZS9pKSkge1xuICAgICAgJCgnaHRtbCcpLmFkZENsYXNzKCdpb3MnKTtcbiAgICB9XG5cbiAgICA7XG4gICAgdmFyIGFkYXB0aXZlRmlsdGVyO1xuXG4gICAgaWYgKCQoJy5qcy10b3Atc2VhcmNoJykubGVuZ3RoKSB7XG4gICAgICB2YXIgc2VhcmNoID0gJCgnLmpzLXBlcm11dGF0aW9uLXNlYXJjaCcpO1xuICAgICAgdmFyIG1vYmlsZVNlYXJjaCA9ICQoJy5qcy1oaWRkZW4nKTtcbiAgICAgIHZhciB0YWJsZXRTZWFyY2ggPSAkKCcuanMtdG9wLXNlYXJjaCcpO1xuICAgICAgdmFyIHRhYmxldEJpZ1RvcCA9ICQoJy5qcy10b3AtbWVudS1kZXNrdG9wJyk7XG4gICAgICB2YXIgbWVudVRvcCA9ICQoJy5qcy1wZXJtdXRhdGlvbi1tZW51LXRvcCcpO1xuICAgICAgdmFyIG1lbnUgPSAkKCcuanMtcGVybXV0YXRpb24tbWFpbicpO1xuICAgICAgdmFyIHBob25lID0gJCgnLmItaGVhZGVyX19saW5rLXBob25lJyk7XG4gICAgICB2YXIgbGFuZyA9ICQoJy5iLWxhbmcnKTtcbiAgICAgIHZhciBwaG9uZURlZmF1bHQgPSAkKCcuYi1oZWFkZXJfX2xlZnQnKTtcblxuICAgICAgYWRhcHRpdmVGaWx0ZXIgPSBmdW5jdGlvbiBhZGFwdGl2ZUZpbHRlcigpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoID49IDMyMCAmJiB3aW5kb3cuaW5uZXJXaWR0aCA8IDc2OCkge1xuICAgICAgICAgIG1vYmlsZVNlYXJjaC5wcmVwZW5kKHNlYXJjaCk7XG4gICAgICAgICAgcGhvbmVEZWZhdWx0LnByZXBlbmQocGhvbmUpO1xuICAgICAgICAgIG1lbnUucHJlcGVuZChtZW51VG9wKTtcbiAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA+PSA3NjggJiYgd2luZG93LmlubmVyV2lkdGggPCAxMDI0KSB7XG4gICAgICAgICAgdGFibGV0U2VhcmNoLnByZXBlbmQoc2VhcmNoKTtcbiAgICAgICAgICBtZW51LnByZXBlbmQobWVudVRvcCk7XG4gICAgICAgICAgcGhvbmVEZWZhdWx0LnByZXBlbmQocGhvbmUpO1xuICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5pbm5lcldpZHRoID49IDEwMjQgJiYgd2luZG93LmlubmVyV2lkdGggPCAxMjgwKSB7XG4gICAgICAgICAgdGFibGV0U2VhcmNoLnByZXBlbmQoc2VhcmNoKTtcbiAgICAgICAgICB0YWJsZXRCaWdUb3AucHJlcGVuZChtZW51VG9wKTtcbiAgICAgICAgICBwaG9uZURlZmF1bHQucHJlcGVuZChwaG9uZSk7XG4gICAgICAgIH0gZWxzZSBpZiAod2luZG93LmlubmVyV2lkdGggPj0gMTI4MCkge1xuICAgICAgICAgIG1lbnUucHJlcGVuZChzZWFyY2gpO1xuICAgICAgICAgIGxhbmcuYmVmb3JlKHBob25lKTtcbiAgICAgICAgICB0YWJsZXRCaWdUb3AucHJlcGVuZChtZW51VG9wKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgYWRhcHRpdmVGaWx0ZXIoKTtcbiAgICAgICQod2luZG93KS5yZXNpemUoZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoJCgnLmpzLXRvcC1zZWFyY2gnKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgYWRhcHRpdmVGaWx0ZXIoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgO1xuICAgICQoJy5qcy1idXJnZXInKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoJCgnLmpzLWJ1cmdlci13cmFwJykuaGFzQ2xhc3MoJ2FjdGl2ZScpKSB7XG4gICAgICAgICQoJy5qcy1idXJnZXItd3JhcCcpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgJCgnLmItcGFnZS13cmFwcGVyJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAkKCdib2R5JykucmVtb3ZlQ2xhc3MoJ25vLXNjcm9sbCcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJCgnLmpzLWJ1cmdlci13cmFwJykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAkKCcuYi1wYWdlLXdyYXBwZXInKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygnbm8tc2Nyb2xsJyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgO1xuXG4gICAgaWYgKCQoJy5qcy1tYWluLXNsaWRlcicpLmxlbmd0aCkge1xuICAgICAgdmFyICRzbGlja0VsZW1lbnQgPSAkKFwiLmpzLW1haW4tc2xpZGVyXCIpO1xuICAgICAgdmFyICRzbGlja05hdiA9ICQoXCIuanMtbmF2LXNsaWRlclwiKTtcbiAgICAgIHZhciAkc2xpY2tXcmFwID0gJChcIi5iLW1haW4tYmxvY2tfX3dyYXBwZXJcIik7IC8vICQoXCIuYi1tYWluLWJsb2NrX193cmFwcGVyIC5qcy1uZXh0XCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gJChcIi5qcy1tYWluLXNsaWRlclwiKS5zbGljayhcInNsaWNrTmV4dFwiKTtcbiAgICAgIC8vIH0pO1xuICAgICAgLy8gJChcIi5iLW1haW4tYmxvY2tfX3dyYXBwZXIgLmpzLXByZXZcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyAkKFwiLmpzLW1haW4tc2xpZGVyXCIpLnNsaWNrKFwic2xpY2tQcmV2XCIpO1xuICAgICAgLy8gfSk7XG5cbiAgICAgICRzbGlja0VsZW1lbnQuc2xpY2soe1xuICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgcm93czogMCxcbiAgICAgICAgZG90czogZmFsc2UsXG4gICAgICAgIGZhZGU6IHRydWUsXG4gICAgICAgIGFycm93czogZmFsc2UsXG4gICAgICAgIC8vIG5leHRBcnJvdzogJHNsaWNrV3JhcC5wYXJlbnQoKS5maW5kKFwiLmpzLW5leHRcIiksXG4gICAgICAgIC8vIHByZXZBcnJvdzogJHNsaWNrV3JhcC5wYXJlbnQoKS5maW5kKFwiLmpzLXByZXZcIiksXG4gICAgICAgIGFzTmF2Rm9yOiAkc2xpY2tOYXYsXG4gICAgICAgIG1vYmlsZUZpcnN0OiB0cnVlLFxuICAgICAgICB6SW5kZXg6IDIsXG4gICAgICAgIHJlc3BvbnNpdmU6IFt7XG4gICAgICAgICAgYnJlYWtwb2ludDogMTAyMyxcbiAgICAgICAgICBzZXR0aW5nczogey8vIGF1dG9wbGF5OiB0cnVlLFxuICAgICAgICAgICAgLy8gYXV0b3BsYXlTcGVlZDogNDAwMCxcbiAgICAgICAgICB9XG4gICAgICAgIH1dXG4gICAgICB9KTtcbiAgICAgICRzbGlja05hdi5zbGljayh7XG4gICAgICAgIHNsaWRlc1RvU2hvdzogMixcbiAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgIGFzTmF2Rm9yOiAkc2xpY2tFbGVtZW50LFxuICAgICAgICBkb3RzOiBmYWxzZSxcbiAgICAgICAgZm9jdXNPblNlbGVjdDogdHJ1ZSxcbiAgICAgICAgYXJyb3dzOiBmYWxzZSxcbiAgICAgICAgbW9iaWxlRmlyc3Q6IHRydWUsXG4gICAgICAgIHJlc3BvbnNpdmU6IFt7XG4gICAgICAgICAgYnJlYWtwb2ludDogMTAyMyxcbiAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgc2xpZGVzVG9TaG93OiA2LFxuICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgICAgICB2ZXJ0aWNhbDogdHJ1ZSxcbiAgICAgICAgICAgIGluZmluaXRlOiBmYWxzZSxcbiAgICAgICAgICAgIHZhcmlhYmxlV2lkdGg6IHRydWUsXG4gICAgICAgICAgICB1c2VUcmFuc2Zvcm06IGZhbHNlIC8vIGF1dG9wbGF5OiB0cnVlLFxuICAgICAgICAgICAgLy8gYXV0b3BsYXlTcGVlZDogNDAwMCxcblxuICAgICAgICAgIH1cbiAgICAgICAgfV1cbiAgICAgIH0pO1xuICAgICAgJHNsaWNrTmF2WzBdLnNsaWNrLiRzbGlkZXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgJCh0aGlzKS5vbihcIm1vdXNlZW50ZXJcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiAkKF90aGlzKS50cmlnZ2VyKFwiY2xpY2tcIik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgOyAvLyA9PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIHByb2plY3Q6IHNjcm9sbFxuICAgIC8vID09PT09PT09PT09PT09PT09PT09XG5cbiAgICB2YXIgb3ZlcmxheVNjcm9sbGJhcjtcbiAgICB2YXIgb3ZlcmxheVNjcm9sbGJhcng7XG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICBvdmVyZmxvd0JlaGF2aW9yOiB7XG4gICAgICAgIHg6ICdoaWRkZW4nLFxuICAgICAgICB5OiAnc2Nyb2xsJ1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIG9wdGlvbnMyID0ge1xuICAgICAgb3ZlcmZsb3dCZWhhdmlvcjoge1xuICAgICAgICB4OiAnc2Nyb2xsJyxcbiAgICAgICAgeTogJ2hpZGRlbicsXG4gICAgICAgIGNsaXBBbHdheXM6IGZhbHNlXG4gICAgICB9XG4gICAgfTtcbiAgICBvYnNlcnZlQ2xhc3Nlcyhkb2N1bWVudC5ib2R5LCAnbm9zY3JvbGwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc2V0T3ZlcmZsb3coJ2hpZGRlbicpO1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzZXRPdmVyZmxvdygnc2Nyb2xsJyk7XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBzZXRPdmVyZmxvdyhlKSB7XG4gICAgICBpZiAob3ZlcmxheVNjcm9sbGJhcikge1xuICAgICAgICBvdmVybGF5U2Nyb2xsYmFyLm9wdGlvbnMoJ292ZXJmbG93QmVoYXZpb3IueScsIGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW9ucy5vdmVyZmxvd0JlaGF2aW9yLnkgPSBlO1xuICAgICAgfVxuICAgIH1cblxuICAgIG92ZXJsYXlTY3JvbGxiYXIgPSBPdmVybGF5U2Nyb2xsYmFycyhkb2N1bWVudC5ib2R5LCBvcHRpb25zKTtcbiAgICAkKCcuanMtc2Nyb2xsLW1lbnUnKS5vdmVybGF5U2Nyb2xsYmFycyhvcHRpb25zKTtcbiAgICBvdmVybGF5U2Nyb2xsYmFyeCA9IE92ZXJsYXlTY3JvbGxiYXJzKGRvY3VtZW50LmJvZHksIG9wdGlvbnMpO1xuICAgICQoJy5qcy1zY3JvbGwteCcpLm92ZXJsYXlTY3JvbGxiYXJzKG9wdGlvbnMyKTtcbiAgICA7XG4gICAgdmFyICRzbGlja0VsZW1lbnQgPSAkKFwiLmpzLWhpc3RvcnlcIik7XG4gICAgdmFyICRzbGlja05hdiA9ICQoXCIuanMtbmF2LWhpc3RvcnlcIik7XG4gICAgdmFyICRzbGlja1dyYXAgPSAkKFwiLmItaGlzdG9yeV9fd3JhcHBlclwiKTtcbiAgICAkKFwiLmItaGlzdG9yeV9fd3JhcHBlciAuanMtbmV4dFwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICQoXCIuanMtaGlzdG9yeVwiKS5zbGljayhcInNsaWNrTmV4dFwiKTtcbiAgICB9KTtcbiAgICAkKFwiLmItaGlzdG9yeV9fd3JhcHBlciAuanMtcHJldlwiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICQoXCIuanMtaGlzdG9yeVwiKS5zbGljayhcInNsaWNrUHJldlwiKTtcbiAgICB9KTtcbiAgICAkc2xpY2tFbGVtZW50LnNsaWNrKHtcbiAgICAgIGluZmluaXRlOiB0cnVlLFxuICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICByb3dzOiAwLFxuICAgICAgZG90czogZmFsc2UsXG4gICAgICBmYWRlOiBmYWxzZSxcbiAgICAgIGFycm93czogZmFsc2UsXG4gICAgICAvLyBuZXh0QXJyb3c6ICRzbGlja1dyYXAucGFyZW50KCkuZmluZCgnLmpzLW5leHQnKSxcbiAgICAgIC8vIHByZXZBcnJvdzogJHNsaWNrV3JhcC5wYXJlbnQoKS5maW5kKCcuanMtcHJldicpLFxuICAgICAgYXNOYXZGb3I6ICRzbGlja05hdixcbiAgICAgIG1vYmlsZUZpcnN0OiB0cnVlLFxuICAgICAgekluZGV4OiAyLFxuICAgICAgcmVzcG9uc2l2ZTogW3tcbiAgICAgICAgYnJlYWtwb2ludDogMTAyMyxcbiAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgdmVydGljYWw6IHRydWUsXG4gICAgICAgICAgdmFyaWFibGVXaWR0aDogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfV1cbiAgICB9KTtcblxuICAgIHZhciBjbG9uZVllYXJzID0gZnVuY3Rpb24gY2xvbmVZZWFycyhkaXJlY3Rpb24pIHtcbiAgICAgIHZhciAkb3JpZ2luYWwgPSAkKFwiLmpzLWhpc3RvcnktbnVtcy1vcmlnaW5hbFwiKTtcbiAgICAgIHZhciBoZWlnaHQgPSAkb3JpZ2luYWwuaGVpZ2h0KCk7XG4gICAgICAkb3JpZ2luYWwuY3NzKHtcbiAgICAgICAgdG9wOiAwXG4gICAgICB9KTtcbiAgICAgICRvcmlnaW5hbC5jbG9uZSgpLnJlbW92ZUNsYXNzKFwianMtaGlzdG9yeS1udW1zLW9yaWdpbmFsXCIpLmFkZENsYXNzKFwianMtaGlzdG9yeS1udW1zLWNsb25lIGowXCIpLmNzcyh7XG4gICAgICAgIHRvcDogMFxuICAgICAgfSkuYXBwZW5kVG8oXCIuanMtaGlzdG9yeS1udW1zXCIpO1xuICAgICAgJG9yaWdpbmFsLmNsb25lKCkucmVtb3ZlQ2xhc3MoXCJqcy1oaXN0b3J5LW51bXMtb3JpZ2luYWxcIikuYWRkQ2xhc3MoXCJqcy1oaXN0b3J5LW51bXMtY2xvbmUgajFcIikuY3NzKHtcbiAgICAgICAgdG9wOiBkaXJlY3Rpb24gPT0gXCJkb3duXCIgPyBoZWlnaHQgOiAtaGVpZ2h0XG4gICAgICB9KS5hcHBlbmRUbyhcIi5qcy1oaXN0b3J5LW51bXNcIik7XG4gICAgICAkb3JpZ2luYWwuY3NzKHtcbiAgICAgICAgcG9zaXRpb246IFwicmVsYXRpdmVcIixcbiAgICAgICAgZGlzcGxheTogXCJibG9ja1wiXG4gICAgICB9KTtcbiAgICAgICQoXCIuanMtaGlzdG9yeS1udW1zLWNsb25lXCIpLmNzcyh7XG4gICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICAgIGRpc3BsYXk6IFwiYmxvY2tcIlxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHZhciBkZXRlY3REaXJlY3Rpb24gPSBmdW5jdGlvbiBkZXRlY3REaXJlY3Rpb24oc2xpY2ssIGN1cnJlbnRTbGlkZSwgbmV4dFNsaWRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gXCJ1cFwiO1xuICAgICAgdmFyIG1heCA9IHNsaWNrLiRzbGlkZXMubGVuZ3RoIC0gMTtcblxuICAgICAgaWYgKG5leHRTbGlkZSA+IGN1cnJlbnRTbGlkZSkge1xuICAgICAgICByZXN1bHQgPSBcImRvd25cIjtcbiAgICAgIH1cblxuICAgICAgaWYgKG5leHRTbGlkZSA9PSAwICYmIGN1cnJlbnRTbGlkZSA9PSBtYXgpIHtcbiAgICAgICAgcmVzdWx0ID0gXCJkb3duXCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50U2xpZGUgPT0gMCAmJiBuZXh0U2xpZGUgPT0gbWF4KSB7XG4gICAgICAgIHJlc3VsdCA9IFwidXBcIjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgJHNsaWNrTmF2Lm9uKFwiYmVmb3JlQ2hhbmdlXCIsIGZ1bmN0aW9uIChldmVudCwgc2xpY2ssIGN1cnJlbnRTbGlkZSwgbmV4dFNsaWRlKSB7XG4gICAgICB2YXIgZGlyZWN0aW9uID0gZGV0ZWN0RGlyZWN0aW9uKHNsaWNrLCBjdXJyZW50U2xpZGUsIG5leHRTbGlkZSk7XG4gICAgICAkKFwiLmpzLWhpc3RvcnktbnVtc1wiKS5jc3Moe1xuICAgICAgICBvdmVyZmxvdzogXCJoaWRkZW5cIlxuICAgICAgfSk7XG4gICAgICBjbG9uZVllYXJzKGRpcmVjdGlvbik7XG5cbiAgICAgIHZhciBnZXRZZWFyID0gZnVuY3Rpb24gZ2V0WWVhcihpbmRleCkge1xuICAgICAgICByZXR1cm4gc2xpY2suJHNsaWRlcy5lcShpbmRleCkuZmluZChcIi5iLWhpc3RvcnlfX251bWJlclwiKS50ZXh0KCkudHJpbSgpLnNwbGl0KFwiXCIpO1xuICAgICAgfTtcblxuICAgICAgdmFyIGN1cnJlbnQgPSBnZXRZZWFyKGN1cnJlbnRTbGlkZSk7XG4gICAgICB2YXIgbmV4dCA9IGdldFllYXIobmV4dFNsaWRlKTsgLy8g0L/QvtC40YHQuiDRgNCw0LfQvdC40YbRiyDQsiDQs9C+0LTQsNGFXG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVudC5sZW5ndGg7IGkrKykge1xuICAgICAgICAkKFwiLmpzLWhpc3RvcnktbnVtcy1jbG9uZS5qMSBbZGF0YS1pbmRleD1cXFwiXCIgKyBpICsgXCJcXFwiXVwiKS50ZXh0KG5leHRbaV0pO1xuXG4gICAgICAgIGlmIChjdXJyZW50W2ldID09IG5leHRbaV0pIHtcbiAgICAgICAgICAvLyDQv9GA0Y/Rh9C10Lwg0LvQuNGI0L3QtdC1XG4gICAgICAgICAgJChcIi5qcy1oaXN0b3J5LW51bXMtY2xvbmUgW2RhdGEtaW5kZXg9XFxcIlwiICsgaSArIFwiXFxcIl1cIikuY3NzKHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkKFwiLmpzLWhpc3RvcnktbnVtcy1vcmlnaW5hbCBbZGF0YS1pbmRleD1cXFwiXCIgKyBpICsgXCJcXFwiXVwiKS5jc3Moe1xuICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IC8vINC+0YHRgtCw0LvRjNC90L7QtSDQtNCy0LjQs9Cw0LXQvCBUT0RPIGRpcmVjdGlvblxuXG5cbiAgICAgIHZhciBoZWlnaHQgPSAkKFwiLmpzLWhpc3RvcnktbnVtcy1vcmlnaW5hbFwiKS5oZWlnaHQoKTtcbiAgICAgICQoXCIuanMtaGlzdG9yeS1udW1zLWNsb25lLmowXCIpLmFuaW1hdGUoe1xuICAgICAgICB0b3A6IGRpcmVjdGlvbiA9PSBcImRvd25cIiA/IC1oZWlnaHQgOiBoZWlnaHRcbiAgICAgIH0pO1xuICAgICAgJChcIi5qcy1oaXN0b3J5LW51bXMtY2xvbmUuajFcIikuYW5pbWF0ZSh7XG4gICAgICAgIHRvcDogMFxuICAgICAgfSk7IC8vINC80LXQvdGP0LXQvCDQtNCw0L3QvdGL0LUg0LIg0L7RgNC40LPQuNC90LDQu9C1XG5cbiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAvL1RPRE9cbiAgICAgICAgJChcIi5qcy1oaXN0b3J5LW51bXMtY2xvbmVcIikucmVtb3ZlKCk7XG4gICAgICAgICQoXCIuanMtaGlzdG9yeS1udW1zLW9yaWdpbmFsIFtkYXRhLWluZGV4XVwiKS5jc3Moe1xuICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG5leHQubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgJChcIi5qcy1oaXN0b3J5LW51bXMtb3JpZ2luYWwgW2RhdGEtaW5kZXg9XFxcIlwiICsgX2kgKyBcIlxcXCJdXCIpLnRleHQobmV4dFtfaV0pO1xuICAgICAgICB9XG4gICAgICB9LCAzMDApO1xuICAgIH0pLnNsaWNrKHtcbiAgICAgIHNsaWRlc1RvU2hvdzogMyxcbiAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgYXNOYXZGb3I6ICRzbGlja0VsZW1lbnQsXG4gICAgICBkb3RzOiBmYWxzZSxcbiAgICAgIGZvY3VzT25TZWxlY3Q6IHRydWUsXG4gICAgICBhcnJvd3M6IGZhbHNlLFxuICAgICAgbW9iaWxlRmlyc3Q6IHRydWUsXG4gICAgICBjZW50ZXJNb2RlOiB0cnVlLFxuICAgICAgY2VudGVyUGFkZGluZzogXCI0MHB4XCIsXG4gICAgICB2YXJpYWJsZVdpZHRoOiB0cnVlLFxuICAgICAgcmVzcG9uc2l2ZTogW3tcbiAgICAgICAgYnJlYWtwb2ludDogNzY3LFxuICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgIHNsaWRlc1RvU2hvdzogNFxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGJyZWFrcG9pbnQ6IDEwMjMsXG4gICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgc2xpZGVzVG9TaG93OiAzLFxuICAgICAgICAgIHZlcnRpY2FsOiB0cnVlLFxuICAgICAgICAgIHZhcmlhYmxlV2lkdGg6IGZhbHNlLFxuICAgICAgICAgIGNlbnRlclBhZGRpbmc6IFwiNTAlXCJcbiAgICAgICAgfVxuICAgICAgfV1cbiAgICB9KTtcbiAgICA7XG5cbiAgICBpZiAoJCgnLmpzLWVtcGxveWVlcy1zbGlkZXInKS5sZW5ndGgpIHtcbiAgICAgIHZhciAkc2xpY2tFbGVtZW50ID0gJCgnLmpzLWVtcGxveWVlcy1zbGlkZXInKTtcbiAgICAgIHZhciAkc2xpY2tXcmFwID0gJCgnLmItZW1wbG95ZWVzX19zbGlkZXInKTtcbiAgICAgICQoJy5iLWVtcGxveWVlc19fc2xpZGVyIC5qcy1uZXh0Jykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAkKCcuanMtZW1wbG95ZWVzLXNsaWRlcicpLnNsaWNrKCdzbGlja05leHQnKTtcbiAgICAgIH0pO1xuICAgICAgJCgnLmItZW1wbG95ZWVzX19zbGlkZXIgLmpzLXByZXYnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICQoJy5qcy1lbXBsb3llZXMtc2xpZGVyJykuc2xpY2soJ3NsaWNrUHJldicpO1xuICAgICAgfSk7XG4gICAgICB2YXIgZHVyYXRpb24gPSA1MDA7XG5cbiAgICAgIHZhciBkZXRlY3REaXJlY3Rpb24gPSBmdW5jdGlvbiBkZXRlY3REaXJlY3Rpb24oc2xpY2ssIGN1cnJlbnRTbGlkZSwgbmV4dFNsaWRlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSAnbGVmdCc7XG4gICAgICAgIHZhciBtYXggPSBzbGljay4kc2xpZGVzLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgaWYgKG5leHRTbGlkZSA+IGN1cnJlbnRTbGlkZSkge1xuICAgICAgICAgIHJlc3VsdCA9ICdyaWdodCc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dFNsaWRlID09IDAgJiYgY3VycmVudFNsaWRlID09IG1heCkge1xuICAgICAgICAgIHJlc3VsdCA9ICdyaWdodCc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VycmVudFNsaWRlID09IDAgJiYgbmV4dFNsaWRlID09IG1heCkge1xuICAgICAgICAgIHJlc3VsdCA9ICdsZWZ0JztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICAkc2xpY2tFbGVtZW50Lm9uKCdpbml0JywgZnVuY3Rpb24gKGV2ZW50LCBzbGljaykge1xuICAgICAgICAkc2xpY2tFbGVtZW50LnNpYmxpbmdzKCkuZmluZCgnLmpzLWFsbCcpLnRleHQoc2xpY2suJHNsaWRlcy5sZW5ndGgpO1xuICAgICAgfSkub24oJ2JlZm9yZUNoYW5nZScsIGZ1bmN0aW9uIChldmVudCwgc2xpY2ssIGN1cnJlbnRTbGlkZSwgbmV4dFNsaWRlKSB7XG4gICAgICAgIHZhciAkaXRlbSA9IHNsaWNrLiRzbGlkZXMuZXEoY3VycmVudFNsaWRlKTtcbiAgICAgICAgdmFyIGsgPSAxMDAgKiAoJGl0ZW0ud2lkdGgoKSArICRpdGVtLmhlaWdodCgpKSAvICRpdGVtLndpZHRoKCk7XG4gICAgICAgIHZhciBvZmZzZXQgPSAxMDsgLy/QvtGC0YHRgtGD0L8g0L7RgiDQutGA0LDRjyDQstC+0LvQvdGLINC/0YDQuCDRgdC80LXQvdC1INGB0LvQsNC50LTQsFxuXG4gICAgICAgIHZhciBpbWFnZU9mZnNldCA9IDEwMDtcbiAgICAgICAgdmFyICRjdXJyZW50ID0gc2xpY2suJHNsaWRlcy5lcShjdXJyZW50U2xpZGUpO1xuICAgICAgICB2YXIgJG5leHQgPSBzbGljay4kc2xpZGVzLmVxKG5leHRTbGlkZSk7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBkZXRlY3REaXJlY3Rpb24oc2xpY2ssIGN1cnJlbnRTbGlkZSwgbmV4dFNsaWRlKTsgLy/RgNC40YHRg9C10LwgICAgY2xpcC1wYXRoOiBwb2x5Z29uKDAgMCwgMTI4JSAwJSwgNjIlIDEwMCUsIDAlIDEwMCUpO1xuICAgICAgICAvL9GDINGC0LXQutGD0YnQtdCz0L4g0YHQu9Cw0LnQtNC10YDQsFxuXG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT0gJ3JpZ2h0Jykge1xuICAgICAgICAgICRjdXJyZW50LmFkZENsYXNzKCdzaG93JykuY3NzKHtcbiAgICAgICAgICAgICdjbGlwLXBhdGgnOiBcInBvbHlnb24oMCAwLCBcIiArIGsgKyBcIiUgMCUsIDEwMCUgMTAwJSwgMCUgMTAwJSlcIixcbiAgICAgICAgICAgIHBhdGg6IDBcbiAgICAgICAgICB9KS5hbmltYXRlKHtcbiAgICAgICAgICAgIHBhdGg6IGtcbiAgICAgICAgICB9LCB7XG4gICAgICAgICAgICBzdGVwOiBmdW5jdGlvbiBzdGVwKG5vdykge1xuICAgICAgICAgICAgICAkY3VycmVudC5jc3Moe1xuICAgICAgICAgICAgICAgICdjbGlwLXBhdGgnOiBcInBvbHlnb24oMCAwLCBcIiArIChrIC0gbm93IC0gb2Zmc2V0KSArIFwiJSAwJSwgXCIgKyAoMTAwIC0gbm93IC0gb2Zmc2V0KSArIFwiJSAxMDAlLCAwJSAxMDAlKVwiXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB2YXIgZGlmZiA9IC1pbWFnZU9mZnNldCAqIChub3cgLyBrKTtcbiAgICAgICAgICAgICAgJGN1cnJlbnQuZmluZCgnLmItZW1wbG95ZWVzX19pbWFnZXMnKS5jc3Moe1xuICAgICAgICAgICAgICAgICd0cmFuc2Zvcm0nOiBcInRyYW5zbGF0ZVgoXCIgKyBkaWZmICsgXCJweClcIlxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgICAgICRjdXJyZW50LmNzcyh7XG4gICAgICAgICAgICAgICAgJ2NsaXAtcGF0aCc6ICcnXG4gICAgICAgICAgICAgIH0pLnJlbW92ZUNsYXNzKCdzaG93Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7IC8v0YDQuNGB0YPQtdC8IGNsaXAtcGF0aFxuICAgICAgICAgIC8v0YMg0YHQu9C10LTRg9GO0YnQtdCz0L4g0YHQu9Cw0LTQtdGA0LBcblxuICAgICAgICAgICRuZXh0LmFkZENsYXNzKCdzaG93JykuY3NzKHtcbiAgICAgICAgICAgICdjbGlwLXBhdGgnOiBcInBvbHlnb24oXCIgKyAoLWsgKyBvZmZzZXQpICsgXCIlIDAlLCBcIiArICgtayAtIDEwMCArIG9mZnNldCkgKyBcIiUgMCUsIDEwMCUgMTAwJSwgMTAwJSAxMDAlKVwiLFxuICAgICAgICAgICAgcGF0aDogMFxuICAgICAgICAgIH0pLmFuaW1hdGUoe1xuICAgICAgICAgICAgcGF0aDoga1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIHN0ZXA6IGZ1bmN0aW9uIHN0ZXAobm93LCB0d2Vlbikge1xuICAgICAgICAgICAgICAkbmV4dC5jc3Moe1xuICAgICAgICAgICAgICAgICdjbGlwLXBhdGgnOiBcInBvbHlnb24oXCIgKyAoayAtIG5vdykgKyBcIiUgMCUsIDEwMCUgMCUsIDEwMCUgMTAwJSwgIFwiICsgKDEwMCAtIG5vdykgKyBcIiUgMTAwJSlcIlxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdmFyIGRpZmYgPSBpbWFnZU9mZnNldCAtIGltYWdlT2Zmc2V0ICogKG5vdyAvIGspO1xuICAgICAgICAgICAgICAkbmV4dC5maW5kKCcuYi1lbXBsb3llZXNfX2ltYWdlcycpLmNzcyh7XG4gICAgICAgICAgICAgICAgJ3RyYW5zZm9ybSc6IFwidHJhbnNsYXRlWChcIiArIGRpZmYgKyBcInB4KVwiXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiBkdXJhdGlvbixcbiAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICAgICAgJG5leHQuY3NzKHtcbiAgICAgICAgICAgICAgICAnY2xpcC1wYXRoJzogJydcbiAgICAgICAgICAgICAgfSkucmVtb3ZlQ2xhc3MoJ3Nob3cnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkY3VycmVudC5hZGRDbGFzcygnc2hvdycpLmNzcyh7XG4gICAgICAgICAgICAnY2xpcC1wYXRoJzogXCJwb2x5Z29uKDAlIDAlLCAxMDAlIDAlLCAxMDAlIDEwMCUsIFwiICsgKDEwMCAtIGspICsgXCIlIDEwMCUpXCIsXG4gICAgICAgICAgICBwYXRoOiAwXG4gICAgICAgICAgfSkuYW5pbWF0ZSh7XG4gICAgICAgICAgICBwYXRoOiBrXG4gICAgICAgICAgfSwge1xuICAgICAgICAgICAgc3RlcDogZnVuY3Rpb24gc3RlcChub3cpIHtcbiAgICAgICAgICAgICAgJGN1cnJlbnQuY3NzKHtcbiAgICAgICAgICAgICAgICAnY2xpcC1wYXRoJzogXCJwb2x5Z29uKFwiICsgbm93ICsgXCIlIDAlLCAxMDAlIDAlLCAxMDAlIDEwMCUsIFwiICsgKDEwMCAtIGsgKyBub3cpICsgXCIlIDEwMCUpXCJcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHZhciBkaWZmID0gaW1hZ2VPZmZzZXQgKiAobm93IC8gayk7XG4gICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgJGN1cnJlbnQuZmluZCgnLmItZW1wbG95ZWVzX19pbWFnZXMnKS5jc3Moe1xuICAgICAgICAgICAgICAgICd0cmFuc2Zvcm0nOiBcInRyYW5zbGF0ZVgoXCIgKyBkaWZmICsgXCJweClcIlxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgICAgICAgICRjdXJyZW50LmNzcyh7XG4gICAgICAgICAgICAgICAgJ2NsaXAtcGF0aCc6ICcnXG4gICAgICAgICAgICAgIH0pLnJlbW92ZUNsYXNzKCdzaG93Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7IC8v0YDQuNGB0YPQtdC8IGNsaXAtcGF0aFxuICAgICAgICAgIC8v0YMg0YHQu9C10LTRg9GO0YnQtdCz0L4g0YHQu9Cw0LTQtdGA0LBcblxuICAgICAgICAgICRuZXh0LmFkZENsYXNzKCdzaG93JykuY3NzKHtcbiAgICAgICAgICAgICdjbGlwLXBhdGgnOiBcInBvbHlnb24oMCUgMCUsIDAlIDAlLCBcIiArICgxMDAgLSBrKSArIFwiJSAxMDAlLCAwJSAxMDAlKVwiLFxuICAgICAgICAgICAgcGF0aDogMFxuICAgICAgICAgIH0pLmFuaW1hdGUoe1xuICAgICAgICAgICAgcGF0aDoga1xuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgIHN0ZXA6IGZ1bmN0aW9uIHN0ZXAobm93LCB0d2Vlbikge1xuICAgICAgICAgICAgICAkbmV4dC5jc3Moe1xuICAgICAgICAgICAgICAgICdjbGlwLXBhdGgnOiBcInBvbHlnb24oMCUgMCUsIFwiICsgKG5vdyAtIG9mZnNldCkgKyBcIiUgMCUsIFwiICsgKDEwMCAtIGsgKyBub3cgLSBvZmZzZXQpICsgXCIlIDEwMCUsICAwJSAxMDAlKVwiXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB2YXIgZGlmZiA9IGltYWdlT2Zmc2V0ICogKG5vdyAvIGspIC0gaW1hZ2VPZmZzZXQ7XG4gICAgICAgICAgICAgICRuZXh0LmZpbmQoJy5iLWVtcGxveWVlc19faW1hZ2VzJykuY3NzKHtcbiAgICAgICAgICAgICAgICAndHJhbnNmb3JtJzogXCJ0cmFuc2xhdGVYKFwiICsgZGlmZiArIFwicHgpXCJcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICAgICAgICAkbmV4dC5jc3Moe1xuICAgICAgICAgICAgICAgICdjbGlwLXBhdGgnOiAnJ1xuICAgICAgICAgICAgICB9KS5yZW1vdmVDbGFzcygnc2hvdycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgJCgnLmpzLWVtcGxveWVlcy1zbGlkZXInKS5zaWJsaW5ncygpLmZpbmQoJy5qcy1ub3cnKS50ZXh0KG5leHRTbGlkZSArIDEpO1xuICAgICAgICAkKCcuanMtZW1wbG95ZWVzLXNsaWRlcicpLnNpYmxpbmdzKCkuZmluZCgnLmpzLWxpbmUnKS5jc3Moe1xuICAgICAgICAgIHdpZHRoOiAwXG4gICAgICAgIH0pLmFuaW1hdGUoe1xuICAgICAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgfSkuc2xpY2soe1xuICAgICAgICBpbmZpbml0ZTogdHJ1ZSxcbiAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgcm93czogMCxcbiAgICAgICAgc3BlZWQ6IGR1cmF0aW9uLFxuICAgICAgICBkb3RzOiBmYWxzZSxcbiAgICAgICAgZmFkZTogdHJ1ZSxcbiAgICAgICAgYXJyb3dzOiBmYWxzZSxcbiAgICAgICAgLy8gbmV4dEFycm93OiAkc2xpY2tXcmFwLnBhcmVudCgpLmZpbmQoJy5qcy1uZXh0JyksXG4gICAgICAgIC8vIHByZXZBcnJvdzogJHNsaWNrV3JhcC5wYXJlbnQoKS5maW5kKCcuanMtcHJldicpLFxuICAgICAgICBtb2JpbGVGaXJzdDogdHJ1ZSxcbiAgICAgICAgekluZGV4OiAyLFxuICAgICAgICBhc05hdkZvcjogJCgnLmpzLWVtcGxveWVlcy1uYXYnKSAvLyByZXNwb25zaXZlOiBbXG4gICAgICAgIC8vICAgICB7XG4gICAgICAgIC8vICAgICAgICAgYnJlYWtwb2ludDogMTAyMyxcbiAgICAgICAgLy8gICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAvLyAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgIC8vICAgICAgICAgICAgIHZlcnRpY2FsOiB0cnVlLFxuICAgICAgICAvLyAgICAgICAgICAgICB2YXJpYWJsZVdpZHRoOiBmYWxzZVxuICAgICAgICAvLyAgICAgICAgIH1cbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gXVxuXG4gICAgICB9KTtcbiAgICAgICQoJy5qcy1lbXBsb3llZXMtbmF2Jykuc2xpY2soe1xuICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICBkb3RzOiBmYWxzZSxcbiAgICAgICAgZm9jdXNPblNlbGVjdDogdHJ1ZSxcbiAgICAgICAgYXJyb3dzOiBmYWxzZSxcbiAgICAgICAgbW9iaWxlRmlyc3Q6IHRydWUsXG4gICAgICAgIGluZmluaXRlOiB0cnVlLFxuICAgICAgICBhc05hdkZvcjogJHNsaWNrRWxlbWVudFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgO1xuICAgIHZhciAkc2xpY2tFbGVtZW50ID0gJCgnLmpzLXByb2R1Y3Rpb24tc2xpZGVyJyk7XG4gICAgdmFyICRzbGlja05hdiA9ICQoJy5qcy1wcm9kdWN0aW9uLW5hdicpO1xuICAgICRzbGlja0VsZW1lbnQuc2xpY2soe1xuICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgIHJvd3M6IDAsXG4gICAgICBkb3RzOiBmYWxzZSxcbiAgICAgIGZhZGU6IHRydWUsXG4gICAgICBhcnJvd3M6IGZhbHNlLFxuICAgICAgYXNOYXZGb3I6ICRzbGlja05hdixcbiAgICAgIG1vYmlsZUZpcnN0OiB0cnVlLFxuICAgICAgekluZGV4OiAyXG4gICAgfSk7XG4gICAgJHNsaWNrTmF2Lm9uKCdpbml0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRzbGlkZXIgPSAkKHRoaXMpO1xuICAgICAgdmFyICRzbGlkZXMgPSAkc2xpZGVyLmZpbmQoJy5zbGljay1zbGlkZScpO1xuICAgICAgJC5lYWNoKCRzbGlkZXMsIGZ1bmN0aW9uIChpZHgsIGl0ZW0pIHtcbiAgICAgICAgJChpdGVtKS5vbignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICRzbGlkZXIuc2xpY2soJ3NsaWNrR29UbycsIGlkeCwgdHJ1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSkuc2xpY2soe1xuICAgICAgc2xpZGVzVG9TaG93OiAyLFxuICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICBhc05hdkZvcjogJHNsaWNrRWxlbWVudCxcbiAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgZm9jdXNPblNlbGVjdDogdHJ1ZSxcbiAgICAgIGFycm93czogZmFsc2UsXG4gICAgICBtb2JpbGVGaXJzdDogdHJ1ZSxcbiAgICAgIHZhcmlhYmxlV2lkdGg6IHRydWUsXG4gICAgICByZXNwb25zaXZlOiBbe1xuICAgICAgICBicmVha3BvaW50OiA3NjcsXG4gICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgc2xpZGVzVG9TaG93OiA2LFxuICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgIHZlcnRpY2FsOiB0cnVlLFxuICAgICAgICAgIGluZmluaXRlOiBmYWxzZSxcbiAgICAgICAgICB2YXJpYWJsZVdpZHRoOiB0cnVlLFxuICAgICAgICAgIHVzZVRyYW5zZm9ybTogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfV1cbiAgICB9KTtcbiAgICA7XG4gICAgdmFyIGFkYXB0aXZlUXVvdGU7XG5cbiAgICBpZiAoJCgnLmpzLXF1b3RlJykubGVuZ3RoKSB7XG4gICAgICB2YXIgcXVvdGVXcmFwcGVyID0gJCgnLmpzLXF1b3RlLXdyYXBwZXInKTtcbiAgICAgIHZhciBxdW90ZSA9ICQoJy5qcy1xdW90ZScpO1xuICAgICAgdmFyIHF1b3RlRGVza3RvcCA9ICQoJy5qcy1xdW90ZS1kZXNrdG9wJyk7XG5cbiAgICAgIGFkYXB0aXZlUXVvdGUgPSBmdW5jdGlvbiBhZGFwdGl2ZVF1b3RlKCkge1xuICAgICAgICBpZiAod2luZG93LmlubmVyV2lkdGggPj0gMzIwICYmIHdpbmRvdy5pbm5lcldpZHRoIDwgMTAyNCkge1xuICAgICAgICAgIHF1b3RlV3JhcHBlci5hcHBlbmQocXVvdGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5pbm5lcldpZHRoID49IDEwMjQpIHtcbiAgICAgICAgICBxdW90ZURlc2t0b3AuYXBwZW5kKHF1b3RlKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgYWRhcHRpdmVRdW90ZSgpO1xuICAgIH1cblxuICAgIDtcbiAgICB2YXIgJHNsaWNrRWxlbWVudCA9ICQoXCIuanMtZXF1aXBtZW50LXNsaWRlclwiKTtcbiAgICB2YXIgJHNsaWNrTmF2ID0gJChcIi5qcy1lcXVpcG1lbnQtbmF2XCIpO1xuICAgIHZhciAkc2xpY2tXcmFwID0gJChcIi5iLWVxdWlwbWVudC1jYXJ0LXNsaWRlcl9fd3JhcHBlclwiKTtcbiAgICB2YXIgbGFzdFNsaWRlID0gZmFsc2U7XG4gICAgdmFyIGZpcnN0U2xpZGUgPSBmYWxzZTtcbiAgICB2YXIgY3VycmVudFNsaWRlT2ZGaXJzdCA9IDA7XG4gICAgdmFyIGN1cnJlbnRTbGlkZU9mU2Vjb25kID0gMDtcbiAgICAkKFwiLmItZXF1aXBtZW50LWNhcnQtc2xpZGVyX193cmFwcGVyIC5qcy1uZXh0XCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgJChcIi5qcy1lcXVpcG1lbnQtc2xpZGVyXCIpLnNsaWNrKFwic2xpY2tOZXh0XCIpO1xuICAgIH0pO1xuICAgICQoXCIuYi1lcXVpcG1lbnQtY2FydC1zbGlkZXJfX3dyYXBwZXIgLmpzLXByZXZcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAkKFwiLmpzLWVxdWlwbWVudC1zbGlkZXJcIikuc2xpY2soXCJzbGlja1ByZXZcIik7XG4gICAgfSk7XG5cbiAgICB2YXIgZ2V0RmlsdGVyID0gZnVuY3Rpb24gZ2V0RmlsdGVyKCkge1xuICAgICAgdmFyICRmaWx0ZXIgPSAkKFwiLmpzLWVxdWlwbWVudC1maWx0ZS5hY3RpdmUgYVwiKTtcbiAgICAgIHJldHVybiAkZmlsdGVyLmRhdGEoXCJ0eXBlXCIpIHx8IFwiZm90b1wiO1xuICAgIH07XG5cbiAgICAkKFwiLmpzLWVxdWlwbWVudC1maWx0ZXJcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgJChcIi5qcy1lcXVpcG1lbnQtZmlsdGVyXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xuICAgICAgJHRoaXMuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XG4gICAgICB2YXIgZmlsdGVyID0gJHRoaXMuZmluZChcIltkYXRhLXR5cGVdXCIpLmRhdGEoXCJ0eXBlXCIpO1xuICAgICAgJHNsaWNrRWxlbWVudC5zbGljayhcInNsaWNrVW5maWx0ZXJcIik7XG4gICAgICAkc2xpY2tOYXYuc2xpY2soXCJzbGlja1VuZmlsdGVyXCIpO1xuICAgICAgJHNsaWNrRWxlbWVudC5zbGljayhcInNsaWNrRmlsdGVyXCIsIFwiW2RhdGEtdHlwZT1cXFwiXCIgKyBmaWx0ZXIgKyBcIlxcXCJdXCIpO1xuICAgICAgJHNsaWNrTmF2LnNsaWNrKFwic2xpY2tGaWx0ZXJcIiwgXCJbZGF0YS10eXBlPVxcXCJcIiArIGZpbHRlciArIFwiXFxcIl1cIik7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgJC5lYWNoKCQoXCIuYi1lcXVpcG1lbnQtY2FydC1zbGlkZXJfX2l0ZW0tbmF2XCIpLm5vdChcIi5zbGljay1jbG9uZWRcIiksIGZ1bmN0aW9uIChpZHgsIHNsaWRlKSB7XG4gICAgICAgICQoc2xpZGUpLmF0dHIoXCJkYXRhLXNsaWNrLWluZGV4XCIsIGluZGV4KTtcbiAgICAgICAgaW5kZXgrKztcbiAgICAgIH0pO1xuICAgICAgZmlsdGVyID09PSBcImZvdG9cIiA/ICRzbGlja0VsZW1lbnQuc2xpY2soXCJzbGlja0dvVG9cIiwgY3VycmVudFNsaWRlT2ZGaXJzdCkgOiAkc2xpY2tFbGVtZW50LnNsaWNrKFwic2xpY2tHb1RvXCIsIGN1cnJlbnRTbGlkZU9mU2Vjb25kKTtcbiAgICB9KTtcbiAgICAkc2xpY2tFbGVtZW50Lm9uKFwiaW5pdFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGZpbHRlciA9IGdldEZpbHRlcigpO1xuICAgICAgICAkc2xpY2tFbGVtZW50LnNsaWNrKFwic2xpY2tGaWx0ZXJcIiwgXCJbZGF0YS10eXBlPVxcXCJcIiArIGZpbHRlciArIFwiXFxcIl1cIik7XG4gICAgICB9KTtcbiAgICB9KS5zbGljayh7XG4gICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgIHJvd3M6IDAsXG4gICAgICBkb3RzOiBmYWxzZSxcbiAgICAgIGZhZGU6IHRydWUsXG4gICAgICBhcnJvd3M6IGZhbHNlLFxuICAgICAgbmV4dEFycm93OiAkc2xpY2tXcmFwLnBhcmVudCgpLmZpbmQoXCIuanMtbmV4dFwiKSxcbiAgICAgIHByZXZBcnJvdzogJHNsaWNrV3JhcC5wYXJlbnQoKS5maW5kKFwiLmpzLXByZXZcIiksXG4gICAgICBhc05hdkZvcjogJHNsaWNrTmF2LFxuICAgICAgbW9iaWxlRmlyc3Q6IHRydWUsXG4gICAgICB6SW5kZXg6IDIsXG4gICAgICBpbmZpbml0ZTogdHJ1ZVxuICAgIH0pLm9uKFwiYWZ0ZXJDaGFuZ2VcIiwgZnVuY3Rpb24gKGUsIHNsaWRlciwgY3VycmVudCkge1xuICAgICAgaWYgKHNsaWRlci4kc2xpZGVzW2N1cnJlbnRdLmRhdGFzZXQudHlwZSA9PT0gXCJmb3RvXCIpIHtcbiAgICAgICAgY3VycmVudFNsaWRlT2ZGaXJzdCA9IGN1cnJlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChzbGlkZXIuJHNsaWRlc1tjdXJyZW50XS5kYXRhc2V0LnR5cGUgPT09IFwic2tldGNoXCIpIHtcbiAgICAgICAgY3VycmVudFNsaWRlT2ZTZWNvbmQgPSBjdXJyZW50O1xuICAgICAgfVxuICAgIH0pO1xuICAgICRzbGlja05hdi5vbihcImluaXRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBmaWx0ZXIgPSBnZXRGaWx0ZXIoKTtcbiAgICAgICAgJHNsaWNrTmF2LnNsaWNrKFwic2xpY2tGaWx0ZXJcIiwgXCJbZGF0YS10eXBlPVxcXCJcIiArIGZpbHRlciArIFwiXFxcIl1cIik7XG4gICAgICB9KTtcbiAgICB9KS5zbGljayh7XG4gICAgICBzbGlkZXNUb1Nob3c6IDMsXG4gICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgIGFzTmF2Rm9yOiAkc2xpY2tFbGVtZW50LFxuICAgICAgZG90czogZmFsc2UsXG4gICAgICBmb2N1c09uU2VsZWN0OiB0cnVlLFxuICAgICAgYXJyb3dzOiBmYWxzZSxcbiAgICAgIG1vYmlsZUZpcnN0OiB0cnVlLFxuICAgICAgdmFyaWFibGVXaWR0aDogdHJ1ZSxcbiAgICAgIGluZmluaXRlOiB0cnVlIC8vIHJlc3BvbnNpdmU6IFtcbiAgICAgIC8vICAgICB7XG4gICAgICAvLyAgICAgICAgIGJyZWFrcG9pbnQ6IDEwMjMsXG4gICAgICAvLyAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAvLyAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDYsXG4gICAgICAvLyAgICAgICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgIC8vICAgICAgICAgICAgIHZlcnRpY2FsOiB0cnVlLFxuICAgICAgLy8gICAgICAgICAgICAgaW5maW5pdGU6IGZhbHNlLFxuICAgICAgLy8gICAgICAgICAgICAgdmFyaWFibGVXaWR0aDogdHJ1ZSxcbiAgICAgIC8vICAgICAgICAgICAgIHVzZVRyYW5zZm9ybTogZmFsc2VcbiAgICAgIC8vICAgICAgICAgfVxuICAgICAgLy8gICAgIH1cbiAgICAgIC8vIF1cblxuICAgIH0pO1xuICAgIDtcbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHNsaWNrRWxlbWVudCA9ICQoJy5qcy1tZWRpYS1zbGlkZXInKTtcbiAgICAgIHZhciAkc2xpY2tXcmFwID0gJCgnLmpzLW1lZGlhLXNsaWRlcicpO1xuICAgICAgJHNsaWNrRWxlbWVudC5zbGljayh7XG4gICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICBuZXh0QXJyb3c6ICRzbGlja1dyYXAucGFyZW50KCkuZmluZCgnLmpzLW5leHQnKSxcbiAgICAgICAgcHJldkFycm93OiAkc2xpY2tXcmFwLnBhcmVudCgpLmZpbmQoJy5qcy1wcmV2JyksXG4gICAgICAgIGluZmluaXRlOiBmYWxzZSxcbiAgICAgICAgc2xpZGVzVG9TaG93OiA0LFxuICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgcm93czogMCxcbiAgICAgICAgcmVzcG9uc2l2ZTogW3tcbiAgICAgICAgICBicmVha3BvaW50OiA3NjgsXG4gICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuICAgICAgICAgICAgcm93czogMixcbiAgICAgICAgICAgIHNsaWRlc1BlclJvdzogMVxuICAgICAgICAgIH1cbiAgICAgICAgfSwge1xuICAgICAgICAgIGJyZWFrcG9pbnQ6IDEwMjQsXG4gICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgIHJvd3M6IDEsXG4gICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDJcbiAgICAgICAgICB9XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBicmVha3BvaW50OiAxOTIwLFxuICAgICAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDNcbiAgICAgICAgICB9XG4gICAgICAgIH1dXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICA7XG4gICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRzbGlja0VsZW1lbnQgPSAkKCcuanMtbmV3cy1wYWdlLXNsaWRlcicpO1xuICAgICAgdmFyICRzbGlja1dyYXAgPSAkKCcuanMtbmV3cy1wYWdlLXNsaWRlcicpO1xuICAgICAgJHNsaWNrRWxlbWVudC5zbGljayh7XG4gICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICBuZXh0QXJyb3c6ICRzbGlja1dyYXAucGFyZW50KCkuZmluZCgnLmpzLW5leHQnKSxcbiAgICAgICAgcHJldkFycm93OiAkc2xpY2tXcmFwLnBhcmVudCgpLmZpbmQoJy5qcy1wcmV2JyksXG4gICAgICAgIGluZmluaXRlOiBmYWxzZSxcbiAgICAgICAgc2xpZGVzVG9TaG93OiAzLFxuICAgICAgICBzbGlkZXNUb1Njcm9sbDogMSxcbiAgICAgICAgcmVzcG9uc2l2ZTogW3tcbiAgICAgICAgICBicmVha3BvaW50OiA3NjgsXG4gICAgICAgICAgc2V0dGluZ3M6ICd1bnNsaWNrJ1xuICAgICAgICB9LCB7XG4gICAgICAgICAgYnJlYWtwb2ludDogMTAyNCxcbiAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAyLFxuICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDFcbiAgICAgICAgICB9XG4gICAgICAgIH1dXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICA7XG5cbiAgICBmdW5jdGlvbiBpbml0TWFwKCkge1xuICAgICAgaWYgKCEkKCcjbWFwJykubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIG1hcCA9ICQoJyNtYXAnKTsgLy8gNTIuNzEyNTczMDcxNTc1N1xuXG4gICAgICB2YXIgbG4gPSArbWFwLmRhdGEoJ2xuJyk7IC8vIDQxLjQ2Mjg0Njk5OTk5OTk3NVxuXG4gICAgICB2YXIgbGcgPSArbWFwLmRhdGEoJ2xnJyk7IC8vICdpbWFnZXMvaW5odG1sL2xvZ28tcGxhY2VtYXJrLnN2ZydcblxuICAgICAgdmFyIGltZyA9IG1hcC5kYXRhKCdpbWcnKTtcbiAgICAgIHltYXBzLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG15TWFwID0gbmV3IHltYXBzLk1hcCgnbWFwJywge1xuICAgICAgICAgIGNlbnRlcjogW2xuLCBsZ10sXG4gICAgICAgICAgem9vbTogMTNcbiAgICAgICAgfSksXG4gICAgICAgICAgICBteVBsYWNlbWFyayA9IG5ldyB5bWFwcy5QbGFjZW1hcmsobXlNYXAuZ2V0Q2VudGVyKCksIHtcbiAgICAgICAgICBoaW50Q29udGVudDogJycgLy8gYmFsbG9vbkNvbnRlbnQ6ICczOTIwMDAsINCzLiDQotCw0LzQsdC+0LIsINGD0LsuINCh0L7QstC10YLRgdC60LDRjywgNTEnXG5cbiAgICAgICAgfSwge1xuICAgICAgICAgIGljb25MYXlvdXQ6ICdkZWZhdWx0I2ltYWdlJyxcbiAgICAgICAgICBpY29uSW1hZ2VIcmVmOiBpbWcsXG4gICAgICAgICAgaWNvbkltYWdlU2l6ZTogWzE5NiwgMTA1XSxcbiAgICAgICAgICAvLyBpY29uSW1hZ2VTaXplOiBbMjgxLCAxNDBdLFxuICAgICAgICAgIGljb25JbWFnZU9mZnNldDogWy0xMDIsIC01MF0gLy8gaWNvbkltYWdlT2Zmc2V0OiBbLTE0MCwgLTcwXVxuXG4gICAgICAgIH0pO1xuICAgICAgICBteU1hcC5nZW9PYmplY3RzLmFkZChteVBsYWNlbWFyayk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpbml0TWFwKCk7XG5cbiAgICBmdW5jdGlvbiBzZWFyY2hBdXRvY29tcGxldGUoKSB7XG4gICAgICB2YXIgZm9ybSA9ICQoJy5qcy1mb3JtLXNlYXJjaCcpO1xuICAgICAgZm9ybS5vbignc3VibWl0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSk7XG4gICAgICB2YXIgdXJsID0gJy9qc29uL2F1dG9jb21wbGV0ZS5qc29uJztcbiAgICAgICQuYWpheCh7XG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiBzdWNjZXNzKGRhdGEpIHtcbiAgICAgICAgICBpZiAoZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgICB2YXIgY3JlYXRlTGFiZWwgPSBmdW5jdGlvbiBjcmVhdGVMYWJlbChsaW5rLCB0ZXh0KSB7XG4gICAgICAgICAgICAgIHJldHVybiBcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYi1tZW51LW1hcF9faXRlbSBqcy1tYXAtaXRlbVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcImItbWVudS1tYXBfX2xpbmtcXFwiIGhyZWY9XFxcIlwiICsgbGluayArIFwiXFxcIiB0aXRsZT1cXFwiXFxcIj5cIiArIHRleHQgKyBcIjwvYT5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIjtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBjcmVhdGVSZXN1bHRMaW5rID0gZnVuY3Rpb24gY3JlYXRlUmVzdWx0TGluayhsaW5rLCB0ZXh0KSB7XG4gICAgICAgICAgICAgIHJldHVybiBcIlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiYi1zZWFyY2gtcmVzdWx0c19faXRlbVxcXCI+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcImItc2VhcmNoLXJlc3VsdHNfX2xpbmtcXFwiIGhyZWY9XFxcIlwiICsgbGluayArIFwiXFxcIiB0aXRsZT1cXFwiXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+XCIgKyB0ZXh0ICsgXCI8L2E+XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCI7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgdGFncyA9IFtdO1xuICAgICAgICAgICAgdmFyIGxhYmVscyA9IGRhdGEubGFiZWxzO1xuICAgICAgICAgICAgdmFyIG1hcExpc3QgPSAkKCcuanMtbWFwLWxpc3QnKTtcbiAgICAgICAgICAgIHZhciBzZWFyY2hSZXN1bHQgPSAkKCcuanMtc2VhcmNoLXJlc3VsdCcpO1xuICAgICAgICAgICAgdmFyIGlucHV0U2VhcmNoID0gJChcIi5qcy1zZWFyY2hcIik7IC8vINCh0L7Qt9C00LDRkdC8INC80LDRgdGB0LjQsiDRgSDRgtC10LPQsNC80LhcblxuICAgICAgICAgICAgJC5lYWNoKGRhdGEuc2VhcmNoLCBmdW5jdGlvbiAoa2V5LCBpdGVtKSB7XG4gICAgICAgICAgICAgIHRhZ3MucHVzaChpdGVtLnRleHQpO1xuICAgICAgICAgICAgfSk7IC8vINCU0L7QsdCw0LLQu9GP0LXQvCDRgtC10LPQuCDQvdCwINGB0YLRgNCw0L3QuNGG0YNcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgbWFwTGlzdC5hcHBlbmQoY3JlYXRlTGFiZWwobGFiZWxzW2ldLmxpbmssIGxhYmVsc1tpXS50ZXh0KSk7XG4gICAgICAgICAgICB9IC8vINCe0L/QuNGB0YvQstCw0LXQvCDRgNCw0LHQvtGC0YMg0LjQvdC/0YPRgtCwXG5cblxuICAgICAgICAgICAgaW5wdXRTZWFyY2gub24oJ2tleXVwJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInKSB7XG4gICAgICAgICAgICAgICAgLy8g0JXRgdC70Lgg0L3QsNC20LDRgiBlbnRlclxuICAgICAgICAgICAgICAgIHZhciBzZWFyY2hSZXN1bHRBcnIgPSBbXTsgLy8g0JzQsNGB0YHQuNCyINC00LvRjyDRgNC10LfRg9C70YzRgtCw0YLQvtCyINCw0LLRgtC+0LrQvtC80L/Qu9C40YLQsFxuXG4gICAgICAgICAgICAgICAgdmFyIGxpbmtBcnIgPSBbXTsgLy8g0JzQsNGB0YHQuNCyINC00LvRjyDQstGL0LHQvtGA0LrQuCDRgNGD0LfRg9C70YzRgtCw0YLQsCDQv9C+0LjRgdC60LAg0LDQstGC0L7QutC+0LzQv9C70LjRgtCwXG5cbiAgICAgICAgICAgICAgICB2YXIgc2VhcmNoSXRlbXMgPSAkKCcudWktbWVudS1pdGVtJyk7IC8vIEl0ZW0g0LDQstGC0L7QutC+0LzQv9C70LjRgtCwXG5cbiAgICAgICAgICAgICAgICAkKFwiLmpzLXNlYXJjaFwiKS5hdXRvY29tcGxldGUoXCJjbG9zZVwiKTtcblxuICAgICAgICAgICAgICAgIGlmIChzZWFyY2hJdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgIHNlYXJjaFJlc3VsdC5odG1sKCcnKTtcbiAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRJdGVtID0gc2VhcmNoSXRlbXMuY2hpbGRyZW4oKTtcbiAgICAgICAgICAgICAgICAgICQuZWFjaChyZXN1bHRJdGVtLCBmdW5jdGlvbiAoa2V5LCBpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlYXJjaFJlc3VsdEFyci5wdXNoKCQoaXRlbSkudGV4dCgpKTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgJC5lYWNoKHNlYXJjaFJlc3VsdEFyciwgZnVuY3Rpb24gKGtleSwgYXJySXRlbSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gZGF0YS5zZWFyY2guZmluZChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLnRleHQgPT09IGFyckl0ZW07XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBsaW5rQXJyLnB1c2gocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgJC5lYWNoKGxpbmtBcnIsIGZ1bmN0aW9uIChrZXksIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoUmVzdWx0LmFwcGVuZChjcmVhdGVSZXN1bHRMaW5rKGl0ZW0ubGluaywgaXRlbS50ZXh0KSk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgc2VhcmNoUmVzdWx0Lmh0bWwoJycpO1xuICAgICAgICAgICAgICAgICAgc2VhcmNoUmVzdWx0LmFwcGVuZCgnPGRpdiBjbGFzcz1cImItc2VhcmNoLXJlc3VsdHNfX2l0ZW1cIj7Qn9C+INCy0LDRiNC10LzRgyDQt9Cw0L/RgNC+0YHRgyDQvdC40YfQtdCz0L4g0L3QtSDQvdCw0LnQtNC10L3QvjwvZGl2PicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChlLnRhcmdldC52YWx1ZS50cmltKCkgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgbWFwTGlzdC5yZW1vdmVDbGFzcygnaGlkZGVuJyk7XG4gICAgICAgICAgICAgICAgc2VhcmNoUmVzdWx0Lmh0bWwoJycpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1hcExpc3QuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICQoaW5wdXRTZWFyY2gpLmF1dG9jb21wbGV0ZSh7XG4gICAgICAgICAgICAgIHNvdXJjZTogdGFncyxcbiAgICAgICAgICAgICAgY2xhc3Nlczoge1xuICAgICAgICAgICAgICAgIFwidWktYXV0b2NvbXBsZXRlXCI6IFwiYi1zZWFyY2gtcmVzdWx0c19fbGlzdFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgICAgICAgICAgIHdpbmRvdy4kc2VhcmNoQXV0b2NvbXBsZXRlID0gJCgnLnVpLW1lbnUnKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgb3BlbjogZnVuY3Rpb24gb3BlbigpIHtcbiAgICAgICAgICAgICAgICBzZWFyY2hSZXN1bHQuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoKSB7XG4gICAgICAgICAgICAgICAgc2VhcmNoUmVzdWx0LnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBzZWFyY2hBdXRvY29tcGxldGUoKTtcbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICAkKFwiLmpzLXNob3ctbW9yZVwiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICgkKHdpbmRvdykud2lkdGgoKSA8IDc2OCkge1xuICAgICAgICAgICQoXCIuYi1hbmNob3ItbGlua3NfX2l0ZW1cIikudG9nZ2xlQ2xhc3MoXCJoaWRlXCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgICQoZG9jdW1lbnQpLm9uKFwiY2xpY2tcIiwgXCIuanMtbG9hZC1tb3JlXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICAgICAgdmFyIHVybCA9ICR0aGlzLmRhdGEoXCJ1cmxcIik7XG4gICAgICAgIHZhciB0YXJnZXQgPSAkdGhpcy5kYXRhKFwidGFyZ2V0XCIpO1xuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIHN1Y2Nlc3MoZGF0YSkge1xuICAgICAgICAgICAgaWYgKGRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgICBpZiAoZGF0YS5odG1sKSB7XG4gICAgICAgICAgICAgICAgJCh0YXJnZXQpLmFwcGVuZChkYXRhLmh0bWwpO1xuICAgICAgICAgICAgICAgICQoXCJib2R5XCIpLnRyaWdnZXIoXCJyZUluaXRBY2NvcmRpb25cIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgO1xuICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzZXR0aW5ncyA9IHtcbiAgICAgICAgaGVhZGVyOiAnLmItYWNjb3JkaW9uLWl0ZW1fX2FjdGl2YXRpb24nLFxuICAgICAgICBjb2xsYXBzaWJsZTogdHJ1ZSxcbiAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgaGVpZ2h0U3R5bGU6ICdjb250ZW50JyxcbiAgICAgICAgYWN0aXZhdGU6IGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgICAgICQoJ2JvZHknKS50cmlnZ2VyKCd0YWItYWNjb3JkaW9uJyk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICAkKCcuanMtYWNjb3JkaW9uJykuYWNjb3JkaW9uKHNldHRpbmdzKTtcblxuICAgICAgdmFyIHJlSW5pdEFjY29yZGlvbiA9IGZ1bmN0aW9uIHJlSW5pdEFjY29yZGlvbigpIHtcbiAgICAgICAgJCgnLmpzLWFjY29yZGlvbicpLmFjY29yZGlvbignZGVzdHJveScpO1xuICAgICAgICAkKCcuanMtYWNjb3JkaW9uJykuYWNjb3JkaW9uKHNldHRpbmdzKTtcbiAgICAgIH07XG5cbiAgICAgICQoJ2JvZHknKS5vbigncmVJbml0QWNjb3JkaW9uJywgcmVJbml0QWNjb3JkaW9uKTtcbiAgICB9KTtcbiAgICA7XG4gICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRzbGlja0VsZW1lbnQgPSAkKCcuanMtbmV3cy1zbGlkZXInKTtcbiAgICAgIHZhciAkc2xpY2tXcmFwID0gJCgnLmpzLW5ld3Mtc2xpZGVyJyk7XG4gICAgICAkc2xpY2tFbGVtZW50LnNsaWNrKHtcbiAgICAgICAgZG90czogZmFsc2UsXG4gICAgICAgIG5leHRBcnJvdzogJHNsaWNrV3JhcC5wYXJlbnQoKS5maW5kKCcuanMtbmV4dCcpLFxuICAgICAgICBwcmV2QXJyb3c6ICRzbGlja1dyYXAucGFyZW50KCkuZmluZCgnLmpzLXByZXYnKSxcbiAgICAgICAgaW5maW5pdGU6IGZhbHNlLFxuICAgICAgICBzbGlkZXNUb1Nob3c6IDMsXG4gICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICByb3dzOiAwLFxuICAgICAgICByZXNwb25zaXZlOiBbe1xuICAgICAgICAgIGJyZWFrcG9pbnQ6IDc2OCxcbiAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICByb3dzOiAyLFxuICAgICAgICAgICAgc2xpZGVzUGVyUm93OiAxXG4gICAgICAgICAgfVxuICAgICAgICB9LCB7XG4gICAgICAgICAgYnJlYWtwb2ludDogMTAyNCxcbiAgICAgICAgICBzZXR0aW5nczoge1xuICAgICAgICAgICAgc2xpZGVzVG9TaG93OiAyXG4gICAgICAgICAgfVxuICAgICAgICB9XVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgO1xuXG4gICAgZnVuY3Rpb24gdGFicygpIHtcbiAgICAgIHZhciAkdGFiQ29udGFpbmVyID0gJCgnLmpzLXRhYicpO1xuICAgICAgJC5lYWNoKCR0YWJDb250YWluZXIsIGZ1bmN0aW9uIChrZXksIGl0ZW0pIHtcbiAgICAgICAgdmFyICR0aGlzID0gJChpdGVtKTtcbiAgICAgICAgdmFyICR0YWJMaW5rcyA9ICR0aGlzLmZpbmQoJy5qcy10YWJzLWxpbmsnKTtcbiAgICAgICAgdmFyICRjb250ZW50ID0gJHRoaXMuZmluZCgnLmpzLXRhYnMtY29udGVudCcpO1xuICAgICAgICAkdGFiTGlua3Mub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciAkbGluayA9ICQodGhpcyk7XG4gICAgICAgICAgdmFyIHRhYkRhdGEgPSAkbGluay5kYXRhKCd0YWInKTtcbiAgICAgICAgICAkdGFiTGlua3MucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICRjb250ZW50LnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAkbGluay5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgJC5lYWNoKCRjb250ZW50LCBmdW5jdGlvbiAoa2V5LCBpdGVtKSB7XG4gICAgICAgICAgICB2YXIgJGl0ZW0gPSAkKGl0ZW0pO1xuXG4gICAgICAgICAgICBpZiAoJGl0ZW0uZGF0YSgndGFiJykgPT09IHRhYkRhdGEpIHtcbiAgICAgICAgICAgICAgJGl0ZW0uYWRkQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaW5pdCgkKCR0YWJMaW5rc1swXSksICRjb250ZW50KTtcbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiBpbml0KCR0YWJMaW5rcywgJGNvbnRlbnQpIHtcbiAgICAgICAgJHRhYkxpbmtzLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgdmFyIHRhYkRhdGEgPSAkdGFiTGlua3MuZGF0YSgndGFiJyk7XG4gICAgICAgICQuZWFjaCgkY29udGVudCwgZnVuY3Rpb24gKGtleSwgaXRlbSkge1xuICAgICAgICAgIHZhciAkaXRlbSA9ICQoaXRlbSk7XG5cbiAgICAgICAgICBpZiAoJGl0ZW0uZGF0YSgndGFiJykgPT09IHRhYkRhdGEpIHtcbiAgICAgICAgICAgICRpdGVtLmFkZENsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRhYnMoKTtcbiAgICAvKipcclxuICAgICAqIENyZWF0ZWQgYnkgYml5ayBvbiAxOS4wNC4yMS5cclxuICAgICAqL1xuXG4gICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgJChcIi5vcy12aWV3cG9ydFwiKS5vbihcInNjcm9sbFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkZWxlbXMgPSAkKFwiLmpzLWtleS1pbmRpY2F0b3JcIik7XG4gICAgICAgICRlbGVtcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgJGVsZW0gPSAkKHRoaXMpO1xuICAgICAgICAgIHZhciBlbmRWYWx1ZSA9ICRlbGVtLmRhdGEoXCJlbmRcIikgfHwgcGFyc2VJbnQoJGVsZW0udGV4dCgpKTtcbiAgICAgICAgICB2YXIgc3RhcnRWYWx1ZSA9ICRlbGVtLmRhdGEoXCJzdGFydFwiKSB8fCAwO1xuXG4gICAgICAgICAgaWYgKGlzRWxlbWVudEluVmlldygkZWxlbSwgZmFsc2UpKSB7XG4gICAgICAgICAgICAkZWxlbS5yZW1vdmVDbGFzcyhcImpzLWtleS1pbmRpY2F0b3JcIikudmVsb2NpdHkoe1xuICAgICAgICAgICAgICB0d2VlbjogMTAwXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgIGVhc2luZzogXCJzcHJpbmdcIixcbiAgICAgICAgICAgICAgZHVyYXRpb246IDEwMDAsXG4gICAgICAgICAgICAgIHByb2dyZXNzOiBmdW5jdGlvbiBwcm9ncmVzcyhlbGVtZW50cywgY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAvL9Cy0L4g0LLRgNC10LzRjyDQstGL0L/QvtC70L3QtdC90LjRjyDQsNC90LjQvNCw0YbQuNC4INC00LjQvdCw0LzQuNGH0LXRgdC60Lgg0L7QsdC90L7QstC70Y/QtdC8INC30L3QsNGH0LXQvdC40LUg0L/QvtC60LDQt9Cw0YLQtdC70Y8g0LIgRE9NXG4gICAgICAgICAgICAgICAgJGVsZW0udGV4dChNYXRoLnJvdW5kKHN0YXJ0VmFsdWUgKyAoZW5kVmFsdWUgLSBzdGFydFZhbHVlKSAqIGNvbXBsZXRlKS50b0xvY2FsZVN0cmluZyhcInJ1LVJVXCIpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIDtcbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdW5kZXJsaW5lID0gJChcIi5qcy11bmRlcmxpbmVcIik7XG4gICAgICAkKFwiLmpzLXRhYnNcIikudGFicyh7XG4gICAgICAgIGJlZm9yZUFjdGl2YXRlOiBmdW5jdGlvbiBiZWZvcmVBY3RpdmF0ZShldmVudCwgdWkpIHtcbiAgICAgICAgICByZXR1cm4gc2V0UG9zaXRpb25VbmRlcmxpbmUodWkubmV3VGFiKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2hvdzoge1xuICAgICAgICAgIGVmZmVjdDogXCJmYWRlXCIsXG4gICAgICAgICAgZHVyYXRpb246IDMwMFxuICAgICAgICB9LFxuICAgICAgICBoaWRlOiB7XG4gICAgICAgICAgZWZmZWN0OiBcImZhZGVcIixcbiAgICAgICAgICBkdXJhdGlvbjogMzAwXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgc2V0UG9zaXRpb25VbmRlcmxpbmUgPSBmdW5jdGlvbiBzZXRQb3NpdGlvblVuZGVybGluZShhY3RpdmVFbGVtZW50KSB7XG4gICAgICAgIHVuZGVybGluZS5jc3Moe1xuICAgICAgICAgIHdpZHRoOiBhY3RpdmVFbGVtZW50LndpZHRoKCksXG4gICAgICAgICAgdG9wOiBhY3RpdmVFbGVtZW50LmlubmVySGVpZ2h0KCkgLSB1bmRlcmxpbmUuaW5uZXJIZWlnaHQoKSxcbiAgICAgICAgICBsZWZ0OiBhY3RpdmVFbGVtZW50LnBvc2l0aW9uKCkubGVmdFxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIHNldFBvc2l0aW9uVW5kZXJsaW5lKCQoXCIuYi10YWJzX19pdGVtLnVpLXRhYnMtYWN0aXZlXCIpKTtcbiAgICAgICQod2luZG93KS5vbihcInJlc2l6ZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh1bmRlcmxpbmVSZXNpemluZyk7XG4gICAgICAgIHZhciB1bmRlcmxpbmVSZXNpemluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBzZXRQb3NpdGlvblVuZGVybGluZSgkKFwiLmItdGFic19faXRlbS51aS10YWJzLWFjdGl2ZVwiKSk7XG4gICAgICAgIH0sIDMwMCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICA7XG4gICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgICAgJCgnLmpzLXNlbGVjdCcpLnNlbGVjdDIoKTtcbiAgICB9KTtcbiAgICA7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAkKCcuYi1wcmVsb2FkZXInKS5mYWRlT3V0KCczMDAnKTtcbiAgICB9LCAxMDApO1xuXG4gICAgZnVuY3Rpb24gcHJlbG9hZCgpIHtcbiAgICAgIHZhciAkZWxlbSA9ICQoJy5qcy1rZXktaW5kaWNhdG9yLXByZWxvYWRlcicpO1xuICAgICAgdmFyIGVuZFZhbHVlID0gJGVsZW0uZGF0YSgnZW5kJykgfHwgcGFyc2VJbnQoJGVsZW0udGV4dCgpKTtcbiAgICAgIHZhciBzdGFydFZhbHVlID0gJGVsZW0uZGF0YSgnc3RhcnQnKSB8fCAwO1xuXG4gICAgICBpZiAoaXNFbGVtZW50SW5WaWV3KCRlbGVtLCBmYWxzZSkpIHtcbiAgICAgICAgJGVsZW0ucmVtb3ZlQ2xhc3MoJ2pzLWtleS1pbmRpY2F0b3ItcHJlbG9hZGVyJykudmVsb2NpdHkoe1xuICAgICAgICAgIHR3ZWVuOiAxMDBcbiAgICAgICAgfSwge1xuICAgICAgICAgIGVhc2luZzogJ3NwcmluZycsXG4gICAgICAgICAgZHVyYXRpb246IDEwMDAsXG4gICAgICAgICAgcHJvZ3Jlc3M6IGZ1bmN0aW9uIHByb2dyZXNzKGVsZW1lbnRzLCBjb21wbGV0ZSkge1xuICAgICAgICAgICAgLy/QstC+INCy0YDQtdC80Y8g0LLRi9C/0L7Qu9C90LXQvdC40Y8g0LDQvdC40LzQsNGG0LjQuCDQtNC40L3QsNC80LjRh9C10YHQutC4INC+0LHQvdC+0LLQu9GP0LXQvCDQt9C90LDRh9C10L3QuNC1INC/0L7QutCw0LfQsNGC0LXQu9GPINCyIERPTVxuICAgICAgICAgICAgJGVsZW0udGV4dChNYXRoLnJvdW5kKHN0YXJ0VmFsdWUgKyAoZW5kVmFsdWUgLSBzdGFydFZhbHVlKSAqIGNvbXBsZXRlKS50b0xvY2FsZVN0cmluZygncnUtUlUnKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICA7XG4gICAgcHJlbG9hZCgpO1xuICAgIDtcbiAgICAkKCcuanMtdXBsb2FkZXInKS51cGxvYWRlcih7XG4gICAgICAnc2hvd1RodW1icyc6IHRydWUsXG4gICAgICAnYWRkTW9yZSc6IHRydWUsXG4gICAgICAnYWxsb3dEdXBsaWNhdGVzJzogZmFsc2UsXG4gICAgICAnZXh0ZW5zaW9ucyc6IFsncGRmJywgJ3BuZycsICdqcGcnLCAnZG9jJywgJ2RvY3gnLCAncnRmJ10sXG4gICAgICAnbWF4U2l6ZSc6IDUsXG4gICAgICAnZXJyb3JzJzoge1xuICAgICAgICAnZmlsZXNTaXplJzogJ9Cf0YDQtdCy0YvRiNC10L0g0LTQvtC/0YPRgdGC0LjQvNGL0Lkg0YDQsNC30LzQtdGAINGE0LDQudC70LAnXG4gICAgICB9LFxuICAgICAgJ2NhcHRpb25zJzoge1xuICAgICAgICAnYnV0dG9uJzogJ9Cf0LXRgNC10YLQsNGJ0LjRgtC1INGB0Y7QtNCwINGE0LDQudC70YsuPGJyLz4gZG9jLCBydGYsIHBkZiwganBnLCBwbmcuJ1xuICAgICAgfSxcbiAgICAgICdkcmFnRHJvcCc6IHtcbiAgICAgICAgLy8gJ2RyYWdFbnRlcic6IHRydWUsIC8vIEZpcmVkIHdoZW4gYSBkcmFnZ2VkIGVsZW1lbnQgZW50ZXJzIHRoZSBpbnB1dC5cbiAgICAgICAgJ2RyYWdMZWF2ZSc6IHRydWUgLy8gRmlyZWQgd2hlbiBhIGRyYWdnZWQgZWxlbWVudCBsZWF2ZXMgdGhlIGlucHV0LlxuICAgICAgICAvLyAnZHJvcCc6IHRydWUsXG5cbiAgICAgIH1cbiAgICB9KTtcbiAgICA7IC8vICQoZnVuY3Rpb24gKCkge1xuICAgIC8vICAgICBjb25zdCB1cmwgPSAnL2pzb24vYXV0b2NvbXBsZXRlLmpzb24nXG4gICAgLy8gICAgICQuYWpheCh7XG4gICAgLy8gICAgICAgICB1cmwsXG4gICAgLy8gICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSkge1xuICAgIC8vICAgICAgICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHtcbiAgICAvLyAgICAgICAgICAgICAgICAgJCggXCIuanMtc2VhcmNoXCIgKS5hdXRvY29tcGxldGUoe1xuICAgIC8vICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBkYXRhLnNlYXJjaFxuICAgIC8vICAgICAgICAgICAgICAgICB9KTtcbiAgICAvLyAgICAgICAgICAgICB9XG4gICAgLy8gICAgICAgICB9XG4gICAgLy8gICAgIH0pO1xuICAgIC8vICAgICAvLyAkKCcuanMtc2VhcmNoJykuYXV0b2NvbXBsZXRlKHtcbiAgICAvLyAgICAgLy8gICAgIHNvdXJjZTogdGFncyxcbiAgICAvLyAgICAgLy8gICAgIHBvc2l0aW9uOiB7bXk6ICdsZWZ0IHRvcCsxJ31cbiAgICAvLyAgICAgLy8gfSk7XG4gICAgLy8gfSk7XG5cbiAgICA7IC8vIGZ1bmN0aW9uIGFuY2hvcigpIHtcbiAgICAvLyAgICAgY29uc3QgYW5jaG9ycyA9ICQoJy5qcy1hbmNob3InKVxuICAgIC8vICAgICBpZighYW5jaG9ycy5sZW5ndGgpIHtcbiAgICAvLyAgICAgICAgIHJldHVyblxuICAgIC8vICAgICB9XG4gICAgLy8gfVxuICAgIC8vXG4gICAgLy8gYW5jaG9yKClcblxuICAgIDtcbiAgfVxuXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGRvY3VtZW50UmVhZHkpO1xufSkoKTsiXX0=
